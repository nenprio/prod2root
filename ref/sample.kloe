C==============================================================================
C  SAMPLE
C==============================================================================
C
C  Description:
C  ------------
C Prod2ntu version for root tuple
C  Language:
C  ---------
C  KLOE Fortran
C
C  Author:
C  -------
C Elena Perez del Rio
C
C
C==============================================================================
      SUBROUTINE SAMIN
C==============================================================================
C
C  Description:
C  ------------
C
C==============================================================================
C
$$IMPLICIT
$$include 'sample.inc'
$$include 'sample_talk.inc'
$$include 'sample_err.inc'
C
C==============================================================================
C
      INTEGER i     ! Used to loop on error counter

      write(*,*)"SAMIN"

      INFOFLAG      = .FALSE.
      DATAFLAG      = .FALSE.
      BPOSFLAG      = .FALSE.
      GDHITFLAG     = .FALSE.
      ECLSFLAG      = .FALSE.
      TRIGFLAG      = .FALSE.
      C2TRGFLAG     = .FALSE.
      TELLINAFLAG   = .FALSE.
      PIZZETTAFLAG  = .FALSE.
      TORTAFLAG     = .FALSE.
      TELEFLAG      = .FALSE.
      PIZZAFLAG     = .FALSE.
      TIMEFLAG      = .FALSE.
      CLUSFLAG      = .FALSE.
      PRECLUSFLAG   = .FALSE.
      CWRKFLAG      = .FALSE.
      CELEFLAG      = .FALSE.
      DTCEFLAG      = .FALSE.
      DTCE0FLAG     = .FALSE.
      DCHITSFLAG    = .FALSE.
      DHREFLAG      = .FALSE.
      DHSPFLAG      = .FALSE.
      TRKVFLAG      = .FALSE.
      VTXFLAG       = .FALSE.
      TRKSFLAG      = .FALSE.
      TRKVOLDFLAG   = .FALSE.
      VTXOLDFLAG    = .FALSE.
      TRKSOLDFLAG   = .FALSE.
      DHITFLAG      = .FALSE.
      DEDXFLAG      = .FALSE.
      DPRSFLAG      = .FALSE.
      GEANFIFLAG    = .FALSE.
      MCFLG         = .FALSE.
      MONTECARLOFLAG= .FALSE.
      
C      write(*,*)"[SAMIN] INFOFLAG: ", INFOFLAG
C      write(*,*)"[SAMIN] BPOSFLAG: ", BPOSFLAG
C      write(*,*)" "

      DO i=1, 5
         InfoErrorCounter(i) = 0.
         BPOSErrorCounter(i) = 0.
         GDHitErrorCounter(i) = 0.
         EclsErrorCounter(i) = 0.
         TrigErrorCounter(i) = 0.
         C2TrigErrorCounter(i) = 0.
         TellinaErrorCounter(i) = 0.
         PizzettaErrorCounter(i) = 0.
         TortaErrorCounter(i) = 0.
         TeleErrorCounter(i) = 0.
         TimeErrorCounter(i) = 0.
         ClusErrorCounter(i) = 0.
         PreClusErrorCounter(i) = 0.
         CWRKErrorCounter(i) = 0.
         CeleErrorCounter(i) = 0.
         DTCEErrorCounter(i) = 0.
      END DO

C-----------------------------------------------------------------------------

      RETURN
      END
C
C==============================================================================
      SUBROUTINE SAMRI
C==============================================================================
C
C  Description:
C  ------------
C
C==============================================================================
C
$$IMPLICIT
C
$$INCLUDE 'CALIBINC:ANERROR.INC'
$$include 'k$inc:jobsta.inc'
$$include 'k$inc:runtyp.inc'
$$include 'sample.inc'
C
C External functions
C
      INTEGER    ANPIST
C
C Local declarations
C
C      INTEGER    status, istat, fillbposcommon
C
C==============================================================================
C
C Put A_C Error Code to SUCCESS at Run_Init
C
      Status = ANPIST(ANSUCC)
      istat = fillbposcommon(nrun)

C      WRITE(0,*) "[DEBUG] Try to write to std error"

      RETURN
      END
C
C==============================================================================
      SUBROUTINE SAMEV
C==============================================================================
C
$$IMPLICIT
$$include 'ybos$library:errcod.inc'
$$include 'c$inc:bcs.inc'
$$include 'c$inc:erlevl.inc'
$$include 'k$inc:oferco.inc'
$$include 'k$inc:jobsta.inc'
$$include 'k$inc:runtyp.inc'
$$include 'k$inc:bpoybs.inc'
c$$Include 'maxstructdim.inc'
$$include 'k$itls:maxstructdim.inc'
$$include 'k$itrg:maxtrgchan.inc'
$$include 'k$itls:emcstruct.inc'        ! Emc Clusters
$$include 'k$itls:evtstruct.inc'  	! Event Information
$$include 'k$itls:geanfistruct.inc'            ! Geanfi Information
$$include 'k$itls:vtxstru.inc'		        ! Charge Verticies
$$include 'k$itls:celestruct.inc'	! Calorimeter Elements
$$include 'k$itls:trkstru.inc'		        ! Tracks
$$include 'k$itls:dprs_struct.inc'             ! DPRS patterns
$$include 'k$itls:dhspstru.inc'
$$include 'k$itls:tclostruct.inc'	! Tracks-to-Clusters
$$include 'k$itls:cfhistruct.inc'       ! Calorimeter First Hit
$$include 'k$itls:qihistruct.inc'       ! QIHI common block
$$include 'k$itls:qcalstruct.inc'       ! QCAL common block
$$include 'k$itrg:telestruct.inc'
$$include 'k$itrg:pizzastruct.inc'
$$include 'k$itls:preclustruct.inc'
$$include 'k$itls:nvostru.inc'
$$include 'k$itls:eclostru.inc'
$$include 'k$itls:t0struct.inc'
$$include 'k$itls:cwrkstruct.inc'
$$include 'k$itls:tellina.inc'
$$include 'k$itls:pizzetta.inc'
$$include 'k$itrg:trgstruct.inc'
$$include 'k$itls:eclsstru.inc'
$$include 'k$itls:gdchitstru.inc'
$$include 'k$itls:bposstruct.inc'
$$include 'k$itls:trkqstru.inc'
$$include 'k$itls:dtcestruct.inc'
$$include 'k$itls:dhrestruct.inc'
$$include 'k$itls:sec2clustru.inc'
$$include 'k$itls:cspsstruct.cin'
$$include 'k$itls:cluostruct.cin'
$$include 'k$itls:cluomcstruct.cin'
$$include 'k$itls:dhitstruct.cin'
$$include 'k$itls:dedx2stru.inc'
$$INCLUDE 'K$ITLS:eleqcaltstru.inc'     ! QCALT
c$$INCLUDE 'K$ITLS:qcalthitstru.cin'    ! QCALT hit Struc
$$INCLUDE 'K$ITLS:ele2hitqcalt.cin'     ! QCALT hit structure
$$INCLUDE 'K$ITLS:CCALTNUM.INC'         ! CCALT stu dimensioner
$$INCLUDE 'K$ITLS:ccaltstru.inc'        ! CCALT Stru
$$INCLUDE 'k$itls:letestruct.cin'       ! LET Stru
C$$INCLUDE 'k$itls:raw2itce.cin'        ! IT Stru
$$INCLUDE 'k$itls:itcestruct.cin'       ! IT Stru
$$INCLUDE 'k$itls:hetenum.cin'          ! HET max dim
$$INCLUDE 'k$itls:hetestru.cin'         ! LET Stru
$$include 'k$itls:prod2ntu.inc'
$$INCLUDE 'k$itls:raw2dtce.cin'

$$include 'sample.inc'
$$include 'sample_talk.inc'
$$include 'sample_err.inc'
      
      data OldRunNumber/0/
      save OldRunNumber
C=============================================================================
C Start of Code:
C=============================================================================
      ERROR_LINE = "[ERROR]"
      ERROR_MC_DATA = ERROR_LINE//" Try to access to missing MC data."
      ERROR_MISS_DATA = ERROR_LINE// "Try to access to missing data of block "
      ERROR_BLOCK = ERROR_LINE//"Block "
      ERROR_INDEX = "Index not valid: "
      ERROR_DOMAIN = "Out of domain: "
C
C     Init structures
      call initstruct()
C
C     Check if MC blocks are required and if they exist
C     Otherwise print error message to alert that 
C     MC blocks exist and they aren't required
C     or they are required but they don't exist
C
      IF( MCFLG .AND. EXPTYP.EQ.EXOFSI ) THEN
         MONTECARLOFLAG = .TRUE.
      ELSE
         MONTECARLOFLAG = .FALSE.
C
C        TODO: Print error to comunicate that the user is trying to acquire
C        MC data and they don't exist or that the user is not requiring
C        MC data and they are present.
C
      ENDIF

      IF (MONTECARLOFLAG) THEN
         MCFLAG_TG=1
      ELSE
         MCFLAG_TG=0
      ENDIF
      
C-----------------------------------------------------------------------------
C Fill event classification information
C-----------------------------------------------------------------------------
      IF( MONTECARLOFLAG )  THEN
         istat = GETEVCL(evt%Info)
C         istat = BLOCAT(iw,'EVCL',1,ind1,inddat)
C   Moved to the Block definition
C         IF( TRIGFLAG ) THEN
C           trgwrd1 = IW( inddat+1 )
C           trgwrd2 = IW( inddat+2 )
C         ENDIF
         
      ELSE
         istat = GETTIME(timesec,timemusec)
         timesec = timesec-946080000  ! Reduce the timing
         ISTAT = BIGEST(IW,'EVCL',BNKNUM)
         IF( ISTAT.ne.YESUCC ) THEN
            Call ERLOGR ('SAME_EV',ERWARN,0,ISTAT,
     &           'No EVCL bank found')

         END IF
         ISTAT = BLOCAT(IW,'EVCL',BNKNUM,IND1,INDDAT )
         IF( ISTAT.ne.YESUCC ) THEN
            Call ERLOGR ('SAME_EV',ERWARN,0,ISTAT,
     &           'No EVCL bank found')
            

         END IF
        
         icurr = IW(INDDAT+5)
         IPos=iand(icurr,'FFFF'x)*1.e-4
         IEle=(icurr/2**16)*1.e-4
         Lumi= iw(inddat+6)*1.e-6         
      ENDIF
C-----------------------------------------------------------------------
C Fill Block Info
C-----------------------------------------------------------------------
      IF (INFOFLAG) THEN
         IF (MONTECARLOFLAG) THEN
            istat = blocat(iw,'BRID',1,ind1,inddat)
            Evt%Info%RunNumber = iw(inddat)
            IF (Evt%Info%RunNumber.ne.OldRunNumber) THEN
               istat = fillbposcommon(Evt%Info%RunNumber)
               OldRunNumber = Evt%Info%RunNumber
            END IF
         ELSE
            Evt%Info%RunNumber = Nrun
         END IF
         Evt%Info%EventNumber = Nev
         
C         WRITE(*,*)"[Debug] Num Ev:", Nev
  
         NumRun = Evt%Info%RunNumber
         NumEv = Evt%Info%EventNumber
         Pileup = Evt%Info%Pileup
         IF ( Pileup < 0 .OR. Pileup > 1 ) THEN
            InfoErrorCounter(4) = InfoErrorCounter(4) + 1
         END IF
         GCod = Evt%Info%GenCod
         IF ( GCod < 0 .OR. GCod > 100 ) THEN
            InfoErrorCounter(4) = InfoErrorCounter(4) + 1
         END IF
         PhiD = Evt%Info%PhiDecay
         IF ( PhiD < 0 .OR. PhiD > 100 ) THEN
            InfoErrorCounter(4) = InfoErrorCounter(4) + 1
         END IF
         A1Typ = Evt%Info%A1type
         IF ( A1Typ < 0 .OR. A1Typ > 100 ) THEN
            InfoErrorCounter(4) = InfoErrorCounter(4) + 1
         END IF
         A2Typ = Evt%Info%A2type
         IF ( A2Typ < 0 .OR. A2Typ > 100 ) THEN
            InfoErrorCounter(4) = InfoErrorCounter(4) + 1
         END IF
         A3Typ = Evt%Info%A3type
         IF ( A3Typ < 0 .OR. A3Typ > 100 ) THEN
            InfoErrorCounter(4) = InfoErrorCounter(4) + 1
         END IF
         B1Typ = Evt%Info%B1type
         IF ( B1Typ < 0 .OR. B1Typ > 100 ) THEN
            InfoErrorCounter(4) = InfoErrorCounter(4) + 1
         END IF
         B2Typ = Evt%Info%B2type
         IF ( B2Typ < 0 .OR. B2Typ > 100 ) THEN
            InfoErrorCounter(4) = InfoErrorCounter(4) + 1
         END IF
         B3Typ = Evt%Info%B3type
         IF ( B3Typ < 0 .OR. B3Typ > 100 ) THEN
            InfoErrorCounter(4) = InfoErrorCounter(4) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Data
C-----------------------------------------------------------------------
C
C   Is it moved in ECLS? Ask Elena.
C
C-----------------------------------------------------------------------
C Fill Block BPOS
C-----------------------------------------------------------------------
      IF (BPOSFLAG) THEN
         BPx = 0.
         BPy = 0.
         BPz = 0.
         Bx = 0.
         By = 0.
         Bz = 0.
         BWidPx = 0.
         BWidPy = 0.
         BWidPz = 0.
         BSx = 0.
         BSy = 0.
         BSz = 0.
         BLumx = 0.
         BLumz = 0.
         Broots = 0.
         BrootsErr = 0.
C
C        GETBPOS requires BPos and BMom banks.
C   
         STATUS = BIGEST(IW,'BPOS',BANKNUM)
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BLOCAT(IW,'BPOS',BANKNUM,IND1,INDDAT)
         END IF
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BIGEST(IW,'BMOM',BANKNUM)
         END IF
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BLOCAT(IW,'BMOM',BANKNUM,IND1,INDDAT)
         END IF

         IF (STATUS.EQ.YESUCC) THEN
            rstat = GETBPOS(Evt%Bpos)
    
            BPx = Evt%Bpos%px
            BPy = Evt%Bpos%py
            BPz = Evt%Bpos%pz
            Bx = Evt%Bpos%x
            By = Evt%Bpos%y
            Bz = Evt%Bpos%z
            BWidPx = Evt%Bpos%errpx
            BWidPy = Evt%Bpos%errpy
            BWidPz = Evt%Bpos%errpz
            BSx = Evt%Bpos%errx
            BSy = Evt%Bpos%erry
            BSz = Evt%Bpos%errz
            BLumx = Evt%Bpos%lumx
            BLumz = Evt%Bpos%lumz
            Broots = Evt%Bpos%Ene
            BrootsErr = Evt%Bpos%ErrEne
         ELSE
            BPOSErrorCounter(1) = BPOSErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block GDHit
C-----------------------------------------------------------------------
      IF (GDHITFLAG) THEN
         DtceHit = 0.
         DhreHit = 0.
         DprsHit = 0.
         DtfsHit = 0.

C        Check existance of banks accordint to the MC flag        
         IF (MONTECARLOFLAG) THEN
             STATUS =  BLOCAT(IW, 'MDCN', 1, IND, INDDAT)
             IF (STATUS.NE.YESUCC) THEN
                 STATUS = MAKE_MDCN(IND, INDDAT)
             END IF
         ELSE
             STATUS =  BLOCAT(IW, 'DCNH', 1, IND, INDDAT)
             IF (STATUS.NE.YESUCC) THEN
                 STATUS = MAKE_DCNH(IND, INDDAT)
             END IF
         END IF

C        If bank doesn't exists, let all fields set to 0
C        Fill them only if the data are meaningful
         IF (STATUS.EQ.YESUCC) THEN
             istat = BIGEST(iw,'DTCE',banknum)
             istat = BLOCAT(iw,'DTCE',banknum,ind1,inddat)
             IF (istat.ne.YESUCC) THEN
                NDtce_copy =0
             ELSE
                NDtce_copy = IW(inddat+DTCNRO)
             ENDIF
             CALL GETGDCHIT(Evt%GHit)
  
             DtceHit = NDtce_copy
             DhreHit = Evt%GHit%nhit
             DprsHit = Evt%GHit%nhpr
             DtfsHit = Evt%GHit%nhtf
         ELSE
            GDHitErrorCounter(1) = GDHitErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Ecls
C-----------------------------------------------------------------------
      IF (ECLSFLAG) THEN
         nEcls = 0
         EclTrgw = 0
         EclFilfo = 0
         DO iecls=1,8
            EclWord(iecls) = 0
            EclStream(iecls) = 0
            EclTagNum(iecls) = 0
            EclEvType(iecls) = 0
         END DO
         
         nEcls2 = 0
         EclTrgw2 = 0
         EclFilfo2 = 0
         DO iecls2=1,8
            EclWord2(iecls2) = 0
            EclStream2(iecls2) = 0
            EclTagNum2(iecls2) = 0
            EclEvType2(iecls2) = 0
         END DO
C
C        ECLS has 2 banks, if at least 1 of them exists, then
C        go ahed and call the get function.
C
         STATUS1 = BLOCAT(IW, 'ECLS', 1, IND, INDDAT)
         STATUS2 = BLOCAT(IW, 'ECLS', 2, IND, INDDAT)

         IF (STATUS.EQ.YESUCC .OR. STATUS1.EQ.YESUCC) THEN
            istat = GETECLS(evt%ecls)
C            
C           Fill variables from first bank, if it exist            
C
            IF (STATUS1.EQ.YESUCC) THEN
               nEcls = evt%ecls%n
      
               IF (nEcls > 0 .AND. nEcls <= 8) THEN
                  EclTrgw = evt%ecls%trigger
                  EclFilfo = evt%ecls%filfo
                  DO iecls = 1,necls
                     EclWord(iecls) = evt%ecls%TotWord(iecls)
                     EclStream(iecls) = evt%ecls%Stream(iecls)
                     EclTagNum(iecls) = evt%ecls%TagNum(iecls)
                     EclEvType(iecls) = evt%ecls%EvnTyp(iecls)
                  END DO
               ELSE
                  IF (nEcls == 0) THEN
                     EclsErrorCounter(2) = EclsErrorCounter(2) + 1
                  ELSE
                     EclsErrorCounter(3) = EclsErrorCounter(3) + 1
                  END IF
                  nEcls = 0   !In this way we avoid negative index which 
               END IF         !could create corrupted arrays of 
                              !negative size in the ROOT Tree
            END IF 
            
C            
C           Fill variables from second bank, if it exist            
C
            IF (STATUS2.EQ.YESUCC) THEN 
               nEcls2 = evt%ecls%n2
      
               IF (nEcls2 > 0 .AND. nEcls <= 8) THEN
                  EclTrgw2 = evt%ecls%trigger2
                  EclFilfo2 = evt%ecls%filfo2
                  DO iecls2=1,necls2
                     EclWord2(iecls2) = evt%ecls%TotWord2(iecls2)
                     EclStream2(iecls2) = evt%ecls%Stream2(iecls2)
                     EclTagNum2(iecls2) = evt%ecls%TagNum2(iecls2)
                     EclEvType2(iecls2) = evt%ecls%EvnTyp2(iecls2)
                  END DO
               ELSE
                  IF (nEcls2 == 0) THEN
                     EclsErrorCounter(2) = EclsErrorCounter(2) + 1
                  ELSE
                     EclsErrorCounter(3) = EclsErrorCounter(3) + 1
                  END IF
                  nEcls2 = 0.
               END IF
            END IF
         ELSE
C
C           Print out error message only if both banks are missing.
C
            EclsErrorCounter(1) = EclsErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Trig
C-----------------------------------------------------------------------
      IF (TRIGFLAG) THEN
         Trgw1 = 0.
         Trgw2 = 0.

         STATUS = BLOCAT(IW,'EVCL',1,IND1,INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            Trgw1 = IW( inddat+1 )
            Trgw2 = IW( inddat+2 )
         ELSE
            TrigErrorCounter(1) = TrigErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block C2Trig
C-----------------------------------------------------------------------
      IF (C2TRGFLAG) THEN
         NSec = 0.
         NSec_NoClu = 0.
         NSec2Clu = 0.
         NClu2s = 0.
         DO iC2Trig=1, 100
            NNorm(iC2Trig)   = 0.
            NormAdd(iC2Trig) = 0.
            NOver(iC2Trig)   = 0.
            OverAdd(iC2Trig) = 0.
            NCosm(iC2Trig)   = 0.
            CosmAdd(iC2Trig) = 0.
         END DO

         STATUS = BIGEST(IW,'CTRG', BANKNUM)
         STATUS = BLOCAT(IW,'CTRG', BANKNUM, IND, INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            istat = GETSEC2CLUSTRU(evt%s2clu)
   
            NSec = Evt%S2CLU%nsect
            NSec_NoClu = Evt%S2CLU%nsect_noclu
            NSec2Clu = Evt%S2CLU%nsect_clu
            NClu2s = Evt%S2CLU%Nclus
   
            IF (NClu2s > 0 .AND. NClu2s <= 100) THEN
               DO iC2Trig=1,NClu2s
                  NNorm(iC2Trig)   = Evt%S2CLU%Nnorm(iC2Trig)
                  NormAdd(iC2Trig) = Evt%S2CLU%NormAdd(iC2Trig)
                  NOver(iC2Trig)   = Evt%S2CLU%Nover(iC2Trig)
                  OverAdd(iC2Trig) = Evt%S2CLU%OverAdd(iC2Trig)
                  NCosm(iC2Trig)   = Evt%S2CLU%Ncosm(iC2Trig)
                  CosmAdd(iC2Trig) = Evt%S2CLU%CosmAdd(iC2Trig)
               END DO
            ELSE
               IF (NClu2s == 0) THEN
                  C2TrigErrorCounter(2) = C2TrigErrorCounter(2) + 1
               ELSE
                  C2TrigErrorCounter(3) = C2TrigErrorCounter(3) + 1
               END IF
               NClu2s = 0.
            END IF
         ELSE
            C2TrigErrorCounter(1) = C2TrigErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block tellina
C-----------------------------------------------------------------------
      IF (TELLINAFLAG) THEN
         NTel = 0.
         DO iTELLINA=1, 300
            Add_Tel(iTELLINA) = 0.
            Bitp_Tel(iTELLINA) = 0.
            Ea_Tel(iTELLINA) = 0.
            Eb_Tel(iTELLINA) = 0.
            Ta_Tel(iTELLINA) = 0.
            Tb_Tel(iTELLINA) = 0.
         END DO
         
         STATUS = BLOCAT(IW, 'TELE', 1, IND, INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = GETTELLINA(Evt%Tellina) 
            
            NTel = Evt%Tellina%n
   
            IF (nTel > 0 .AND. nTel <= 300) THEN
               DO iTELLINA=1, nTel
                    Add_Tel(iTELLINA) = Evt%Tellina%add(iTELLINA)
                  Bitp_Tel(iTELLINA) = Evt%Tellina%Bitp(iTELLINA)
                  IF ( Bitp_Tel(iTELLINA) < 0 .OR. Bitp_Tel(iTELLINA) > 1100 ) THEN
                     TellinaErrorCounter(4) = TellinaErrorCounter(4) + 1
                  END IF
                    Ea_Tel(iTELLINA) = Evt%Tellina%Ea(iTELLINA)
                    Eb_Tel(iTELLINA) = Evt%Tellina%Eb(iTELLINA)
                    Ta_Tel(iTELLINA) = Evt%Tellina%Ta(iTELLINA)
                    Tb_Tel(iTELLINA) = Evt%Tellina%Tb(iTELLINA)
              END DO
            ELSE
               IF (nTel == 0) THEN
                  TellinaErrorCounter(2) = TellinaErrorCounter(2) + 1
               ELSE
                  TellinaErrorCounter(3) = TellinaErrorCounter(3) + 1
               END IF
               nTel = 0.
            END IF
         ELSE
            TellinaErrorCounter(1) = TellinaErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block pizzetta
C-----------------------------------------------------------------------
      IF (PIZZETTAFLAG) THEN
         NPiz = 0.
         DO iPIZZETTA=1, 300
            Add_Piz(iPIZZETTA) = 0.
            Ea_Piz(iPIZZETTA)  = 0.
            Eb_Piz(iPIZZETTA)  = 0.
            E_Piz(iPIZZETTA)   = 0.
            Z_Piz(iPIZZETTA)   = 0.
         END DO
         
         STATUS = BLOCAT(IW, 'PZZA', 1, IND, INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = GETPIZZETTA(Evt%Pizzetta)
   
            NPiz = Evt%Pizzetta%n
            IF (NPiz > 0 .AND. NPiz <= 300) THEN
               DO iPIZZETTA=1, NPiz
                  Add_Piz(iPIZZETTA) = Evt%Pizzetta%Add(iPIZZETTA)
                  Ea_Piz(iPIZZETTA)  = Evt%Pizzetta%Ea(iPIZZETTA)
                  Eb_Piz(iPIZZETTA)  = Evt%Pizzetta%Eb(iPIZZETTA)
                  E_Piz(iPIZZETTA)   = Evt%Pizzetta%E_Rec(iPIZZETTA)
                  Z_Piz(iPIZZETTA)   = Evt%Pizzetta%Z_Mod(iPIZZETTA)
               END DO
            ELSE
               IF (nPiz == 0) THEN
                  PizzettaErrorCounter(2) = PizzettaErrorCounter(2) + 1
               ELSE
                  PizzettaErrorCounter(3) = PizzettaErrorCounter(3) + 1
               END IF
               NPiz = 0.
            END IF
         ELSE
            PizzettaErrorCounter(1) = PizzettaErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Torta
C-----------------------------------------------------------------------
      IF (TORTAFLAG) THEN
         tSpent = 0.
         tDead = 0.
         Type = 0.
         BPhi = 0.
         EPhi = 0.
         WPhi = 0.
         BBha = 0.
         EBha = 0.
         WBha = 0.
         BCos = 0.
         ECos = 0.
         WCos = 0.
         E1W1_Dwn = 0.
         B1_Dwn = 0.
         T0d_Dwn = 0.
         VetoCos = 0.
         VetoBha = 0.
         Bdw = 0.
         Rephasing = 0.
         TDC1_Pht1 = 0.
         Dt2_T1 = 0.
         Fiducial = 0.
         T1c = 0.
         T1d = 0.
         T2d = 0.
         Tcr = 0.
         TCaf_Tcrd = 0.
         TCaf_T2d = 0.
         Moka_T2d = 0.
         DO iTORTA=1, 10
           Moka_T2Dsl(iTORTA) = 0.
         END DO
         
         STATUS = BIGEST(IW,'TPIE',BNKNUM)
         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = BLOCAT(IW, 'TPIE', BNKNUM, IND, INDDAT)
         ENDIF

         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = GETTRIGGER(evt%trg)
   
            tSpent = evt%trg%tspent
            tDead = evt%trg%tdead
            Type = evt%trg%type
            IF ( Type < 0 .OR. Type > 7 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            BPhi = evt%trg%bphi
            IF ( BPhi < 0 .OR. BPhi > 3 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            EPhi = evt%trg%ephi
            IF ( EPhi < 0 .OR. EPhi > 3 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            WPhi = evt%trg%wphi
            IF ( WPhi < 0 .OR. WPhi > 3 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            BBha = evt%trg%bbha
            IF ( BBha < 0 .OR. BBha > 3 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            EBha = evt%trg%ebha
            IF ( EBha < 0 .OR. EBha > 3 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            WBha = evt%trg%wbha
            IF ( WBha < 0 .OR. WBha > 3 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            BCos = evt%trg%bcos
            IF ( BCos < 0 .OR. BCos > 3 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            ECos = evt%trg%ecos
            IF ( ECos < 0 .OR. ECos > 3 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            WCos = evt%trg%wcos
            IF ( WCos < 0 .OR. WCos > 3 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            E1W1_Dwn = evt%trg%e1w1_dwn
            IF ( E1W1_Dwn < 0 .OR. E1W1_Dwn > 1 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            B1_Dwn = evt%trg%b1_dwn
            IF ( B1_Dwn < 0 .OR. B1_Dwn > 1 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            T0d_Dwn = evt%trg%t0d_dwn
            IF ( T0d_Dwn < 0 .OR. T0d_Dwn > 1 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            VetoCos = evt%trg%vetocos
            IF ( VetoCos < 0 .OR. VetoCos > 1 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            VetoBha = evt%trg%vetobha
            IF ( VetoBha < 0 .OR. VetoBha > 1 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            Bdw = evt%trg%bdw
            IF ( Bdw < 0 .OR. Bdw > 1 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            Rephasing = evt%trg%rephasing
            IF ( Rephasing < 0 .OR. Rephasing > 4096 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            TDC1_Pht1 = evt%trg%tdc1_pht1
            IF ( TDC1_Pht1 < 0 .OR. TDC1_Pht1 > 4096 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            Dt2_T1 = evt%trg%dt2_t1
            IF ( Dt2_T1 < 0 .OR. Dt2_T1 > 4096 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            Fiducial = evt%trg%fiducial
            IF ( Fiducial < 0 .OR. Fiducial > 4096 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            T1c = evt%trg%t1c
            IF ( T1c < 0 .OR. T1c > 4096 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            T1d = evt%trg%t1d
            IF ( T1d < 0 .OR. T1d > 4096 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            T2d = evt%trg%t2d
            IF ( T2d < 0 .OR. T2d > 4096 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            Tcr = evt%trg%tcr
            IF ( Tcr < 0 .OR. Tcr > 4096 ) THEN
               TortaErrorCounter(4) = TortaErrorCounter(4) + 1
            END IF
            TCaf_Tcrd = evt%trg%tcaf_tcrd
            TCaf_T2d = evt%trg%tcaf_t2d
            Moka_T2d = evt%trg%moka_t2d
            Moka_T2Dsl = evt%trg%moka_t2dsl
         ELSE
            TortaErrorCounter(1) = TortaErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Tele
C-----------------------------------------------------------------------
      IF (TELEFLAG) THEN
         NTele = 0.
         DO iEVTTELE=1, 300
            Det_Trg(iEVTTELE) = 0.
            BitP(iEVTTELE) = 0.
            Sector(iEVTTELE) = 0.
            SerKind(iEVTTELE) = 0.
            Ea_Trg(iEVTTELE) = 0.
            Eb_Trg(iEVTTELE) = 0.
            Ta_Trg(iEVTTELE) = 0.
            Tb_Trg(iEVTTELE) = 0.
         END DO
         
         STATUS = BIGEST(IW, 'TELE', BNKNUM)
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BLOCAT(IW, 'TELE', BNKNUM, IND, INDDAT)
         END IF
        
         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = GETTELESTRU(Evt%TELE)
      
            NTele = Evt%TELE%ntele
            IF (NTele > 0 .AND. NTele <= 300) THEN
              DO iEVTTELE=1, NTele
                 Det_Trg(iEVTTELE) = Evt%TELE%Det(iEVTTELE)
                 IF ( Det_Trg(iEVTTELE) < 0 .OR. Det_Trg(iEVTTELE) > 3 ) THEN
                    TeleErrorCounter(4) = TeleErrorCounter(4) + 1
                 END IF
                 BitP(iEVTTELE) = Evt%TELE%Bitp(iEVTTELE)
                 IF ( BitP(iEVTTELE) < 0 .OR. BitP(iEVTTELE) > 1100 ) THEN
                    TeleErrorCounter(4) = TeleErrorCounter(4) + 1
                 END IF
                 Sector(iEVTTELE) = Evt%TELE%Sector(iEVTTELE)
                 IF ( Sector(iEVTTELE) < 0 .OR. Sector(iEVTTELE) > 50 ) THEN
                    TeleErrorCounter(4) = TeleErrorCounter(4) + 1
                 END IF
                 SerKind(iEVTTELE) = Evt%TELE%Serkind(iEVTTELE)
                 IF ( SerKind(iEVTTELE) < 0 .OR. SerKind(iEVTTELE) > 3 ) THEN
                    TeleErrorCounter(4) = TeleErrorCounter(4) + 1
                 END IF
                 Ea_Trg(iEVTTELE) = Evt%TELE%Ea(iEVTTELE)
                 Eb_Trg(iEVTTELE) = Evt%TELE%Eb(iEVTTELE)
                 Ta_Trg(iEVTTELE) = Evt%TELE%Ta(iEVTTELE)
                 Tb_Trg(iEVTTELE) = Evt%TELE%Tb(iEVTTELE)
              END DO
            ELSE
              IF (NTele == 0) THEN
                 TeleErrorCounter(2) = TeleErrorCounter(2) + 1
              ELSE
                 TeleErrorCounter(3) = TeleErrorCounter(3) + 1
              END IF
              NTele = 0.
            END IF
         ELSE
            TeleErrorCounter(1) = TeleErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block pizza
C-----------------------------------------------------------------------
      IF (PIZZAFLAG) THEN
         NPack = 0.
         DO iPIZZA=1, 300
           PakSect(iPIZZA) = 0.
           PakDet(iPIZZA) = 0.
           PakSerk(iPIZZA) = 0.
           Ea_Pack(iPIZZA) = 0.
           Eb_Pack(iPIZZA) = 0.
           E_Rec(iPIZZA) = 0.
           Z_mod(iPIZZA) = 0.
         END DO
         
         STATUS = BLOCAT(IW, 'PZZA', 1, IND, INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            istat = PIZZA_RESET(Evt%PIZZA)
            istat = GETPIZZASTRU(Evt%PIZZA)
      
            NPack = Evt%PIZZA%npizza
            IF (NPack > 0 .AND. NPack <= 300) THEN
              DO iPIZZA=1, NPack
                PakSect(iPIZZA) = Evt%PIZZA%sector(iPIZZA)
                PakDet(iPIZZA) = Evt%PIZZA%det(iPIZZA)
                PakSerk(iPIZZA) = Evt%PIZZA%serkind(iPIZZA)
                Ea_Pack(iPIZZA) = Evt%PIZZA%Ea(iPIZZA)
                Eb_Pack(iPIZZA) = Evt%PIZZA%Eb(iPIZZA)
                E_Rec(iPIZZA) = Evt%PIZZA%E_rec(iPIZZA)
                Z_mod(iPIZZA) = Evt%PIZZA%Z_mod(iPIZZA)
              END DO
            ELSE
              IF (NPack == 0) THEN
                 PizzaErrorCounter(2) = PizzaErrorCounter(2) + 1
              ELSE
                 PizzaErrorCounter(3) = PizzaErrorCounter(3) + 1
              END IF
              NPack = 0.
            END IF
         ELSE
            PizzaErrorCounter(1) = PizzaErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Time
C-----------------------------------------------------------------------
      IF (TIMEFLAG) THEN
         T0Dc0 = 0.
         T0Hit0 = 0.
         T0Clu0 = 0.
         T0Step1 = 0.
         DelayCable = 0.
         TBunch = 0.
C
C        Time Block has 2 distinct banks and 2 get functions.
C        Then we call them only if the respective bank exists,
C
         STATUS = YENOBK
         ISTAT = BLOCAT(IW, "T0GL", 1, IND, INDDAT)
         IF (ISTAT.EQ.YESUCC) THEN
            STATUS = YESUCC
            istat = T0GLRD(T0Dc0,T0Hit0,T0Clu0,T0Step1,DelayCable,TBunch)
         END IF
         
         ISTAT = BLOCAT(IW, "T0MC", 1, IND, INDDAT)
         IF (ISTAT.EQ.YESUCC) THEN
            istat = T0MCRD(TPhased_mc)
            STATUS = YESUCC
         END IF

         IF (STATUS.NE.YESUCC) THEN
            TimeErrorCounter(1) = TimeErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Clus
C-----------------------------------------------------------------------
      IF (CLUSFLAG) THEN
         NClu = 0.
         DO iEVTCLU=1, 100
            EneCl(iEVTCLU) = 0.
            TCl(iEVTCLU) = 0.
            XCl(iEVTCLU) = 0.
            YCl(iEVTCLU) = 0.
            ZCl(iEVTCLU) = 0.
            XaCl(iEVTCLU) = 0.
            YaCl(iEVTCLU) = 0.
            ZaCl(iEVTCLU) = 0.
            XRmCl(iEVTCLU) = 0.
            YRmsCl(iEVTCLU) = 0.
            ZrmsCl(iEVTCLU) = 0.
            TrmsCl(iEVTCLU) = 0.
            FlagCl(iEVTCLU) = 0.
         END DO
         
         STATUS = BLOCAT(IW, 'CLPS', 1, IND, INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            istat = GETCLUSTRU(Evt%Clu)
            
            NClu = Evt%Clu%n 
C            WRITE(*,*) "[DEBUG] NClu: ", NClu
            IF (NClu > 0 .AND. NClu <= 100) THEN
               DO iEVTCLU=1, NClu
                  EneCl(iEVTCLU) = Evt%Clu%E (iEVTCLU)
                  TCl(iEVTCLU) = Evt%Clu%T (iEVTCLU)
                  XCl(iEVTCLU) = Evt%Clu%X (iEVTCLU)
                  YCl(iEVTCLU) = Evt%Clu%Y (iEVTCLU)
                  ZCl(iEVTCLU) = Evt%Clu%Z (iEVTCLU)
                  XaCl(iEVTCLU) = Evt%Clu%Xa(iEVTCLU)
                  YaCl(iEVTCLU) = Evt%Clu%Ya(iEVTCLU)
                  ZaCl(iEVTCLU) = Evt%Clu%Za(iEVTCLU)
                  XRmCl(iEVTCLU) = Evt%Clu%Xrms(iEVTCLU)
                  YRmsCl(iEVTCLU) = Evt%Clu%Yrms(iEVTCLU)
                  ZrmsCl(iEVTCLU) = Evt%Clu%Zrms(iEVTCLU)
                  TrmsCl(iEVTCLU) = Evt%Clu%Trms(iEVTCLU)
                  FlagCl(iEVTCLU) = Evt%Clu%Flag(iEVTCLU)
               END DO
            ELSE
               IF (NClu == 0) THEN
                  ClusErrorCounter(2) = ClusErrorCounter(2) + 1
               ELSE
                  ClusErrorCounter(3) = ClusErrorCounter(3) + 1
               END IF
               NClu = 0.
            END IF
C         
C           Fill MC data only if they exist, otherwise don't create empty structures         
C
            IF (MONTECARLOFLAG) THEN
              NCluMc = 0.
              DO iEVTCLUMC=1, 100
                 NPar(iEVTCLUMC) = 0.
                 PNum1(iEVTCLUMC) = 0.
                 Pid1(iEVTCLUMC) = 0.
                 PNum2(iEVTCLUMC) = 0.
                 Pid2(iEVTCLUMC) = 0.
                 PNum3(iEVTCLUMC) = 0.
                 Pid3(iEVTCLUMC) = 0.
              END DO
              
              NCluMc = Evt%Clu%nmc
              IF (NCluMc > 0 .AND. NCluMc <= 100) THEN
                 DO iEVTCLUMC=1, NCluMc
                    NPar(iEVTCLUMC) = Evt%Clu%Npart(iEVTCLUMC)
                    IF ( NPar(iEVTCLUMC) < 0 .OR. NPar(iEVTCLUMC) > 10 ) THEN
                       ClusErrorCounter(4) = ClusErrorCounter(4) + 1
                    END IF
                    PNum1(iEVTCLUMC) = Evt%Clu%part1(iEVTCLUMC)
                    IF ( PNum1(iEVTCLUMC) < 0 .OR. PNum1(iEVTCLUMC) > 100 ) THEN
                       ClusErrorCounter(4) = ClusErrorCounter(4) + 1
                    END IF
                    Pid1(iEVTCLUMC) = Evt%Clu%pid1(iEVTCLUMC)
                    IF ( Pid1(iEVTCLUMC) < 0 .OR. Pid1(iEVTCLUMC) > 100 ) THEN
                       ClusErrorCounter(4) = ClusErrorCounter(4) + 1
                    END IF
                    PNum2(iEVTCLUMC) = Evt%Clu%part2(iEVTCLUMC)
                    IF ( PNum2(iEVTCLUMC) < 0 .OR. PNum2(iEVTCLUMC) > 100 ) THEN
                       ClusErrorCounter(4) = ClusErrorCounter(4) + 1
                    END IF
                    Pid2(iEVTCLUMC) = Evt%Clu%pid2(iEVTCLUMC)
                    IF ( Pid2(iEVTCLUMC) < 0 .OR. Pid2(iEVTCLUMC) > 100 ) THEN
                       ClusErrorCounter(4) = ClusErrorCounter(4) + 1
                    END IF
                    PNum3(iEVTCLUMC) = Evt%Clu%part3(iEVTCLUMC)
                    IF ( PNum3(iEVTCLUMC) < 0 .OR. PNum3(iEVTCLUMC) > 100 ) THEN
                       ClusErrorCounter(4) = ClusErrorCounter(4) + 1
                    END IF
                    Pid3(iEVTCLUMC) = Evt%Clu%pid3(iEVTCLUMC)
                    IF ( Pid3(iEVTCLUMC) < 0 .OR. Pid3(iEVTCLUMC) > 100 ) THEN
                       ClusErrorCounter(4) = ClusErrorCounter(4) + 1
                    END IF
                 END DO
              ELSE
                 IF (NCluMc == 0) THEN
                    ClusErrorCounter(2) = ClusErrorCounter(2) + 1
                 ELSE
                    ClusErrorCounter(3) = ClusErrorCounter(3) + 1
                 END IF
                 NCluMc = 0.
              END IF
            END IF
         ELSE
            ClusErrorCounter(1) = ClusErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Pre-Clusters
C-----------------------------------------------------------------------
      IF (PRECLUSFLAG) THEN
         NPClu = 0.
         DO iPRECLU=1, 100
           EPre(iPRECLU) = 0.
           TPre(iPRECLU) = 0.
           XPre(iPRECLU) = 0.
           YPre(iPRECLU) = 0.
           ZPre(iPRECLU) = 0.
           TAPre(iPRECLU) = 0.
           TBPre(iPRECLU) = 0.
           TARPre(iPRECLU) = 0.
           TBRPre(iPRECLU) = 0.
         END DO
C   
C        It reads CPLS and CPPS 
C
         STATUS = BLOCAT(IW, 'CPLS', 1, IND, INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BLOCAT(IW, 'CPPS', 1, IND, INDDAT)
         END IF

         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = GETPRECLUSTRU(Evt%PreClu)
      
            NPClu = Evt%PreClu%n 
C            WRITE(*,*) "[DEBUG] NPClu: ", NPClu
            IF (NPClu > 0 .AND. NPClu <= 100) THEN
              DO iPRECLU=1, NPClu
                EPre(iPRECLU) = Evt%PreClu%E (iPRECLU)
                TPre(iPRECLU) = Evt%PreClu%T (iPRECLU)
                XPre(iPRECLU) = Evt%PreClu%X (iPRECLU)
                YPre(iPRECLU) = Evt%PreClu%Y (iPRECLU)
                ZPre(iPRECLU) = Evt%PreClu%Z (iPRECLU)
                TAPre(iPRECLU) = Evt%PreClu%TA(iPRECLU)
                TBPre(iPRECLU) = Evt%PreClu%TB(iPRECLU)
                TARPre(iPRECLU) = Evt%PreClu%TrmsA(iPRECLU)
                TBRPre(iPRECLU) = Evt%PreClu%TrmsB(iPRECLU)
              END DO
            ELSE
              IF (NPClu == 0) THEN
                 PreClusErrorCounter(2) = PreClusErrorCounter(2) + 1
              ELSE
                 PreClusErrorCounter(3) = PreClusErrorCounter(3) + 1
              END IF
              NPClu = 0
            END IF
         ELSE
            PreClusErrorCounter(1) = PreClusErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block CWRK
C-----------------------------------------------------------------------
      IF (CWRKFLAG) THEN
         NCHit = 0.
         DO iCWRK=1, 2000
            IClu(iCWRK) = 0.
            ICel(iCWRK) = 0.
            CAdd(iCWRK) = 0.
            CmcHit(iCWRK) = 0.
            Ckine(iCWRK) = 0.
            Ene(iCWRK) = 0.
            T(iCWRK) = 0.
            X(iCWRK) = 0.
            Y(iCWRK) = 0.
            Z(iCWRK) = 0.
         END DO
  
         STATUS = BLOCAT(IW, 'CWRK', 1, IND, INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            istat = GETCWRKSTRU(Evt%Cwrk)
      
            NCHit = Evt%CWRK%n 
C            WRITE(*,*) "[DEBUG] NCHit: ", NCHit
            IF (NCHit > 0 .AND. NCHit <= 2000) THEN
               DO iCWRK=1, NCHit
                  IClu(iCWRK) = Evt%CWRK%icl(iCWRK)
                  ICel(iCWRK) = Evt%CWRK%cele(iCWRK)
                  CAdd(iCWRK) = Evt%CWRK%add(iCWRK)
                  CmcHit(iCWRK) = Evt%CWRK%nhit(iCWRK)
                  Ckine(iCWRK) = Evt%CWRK%kine(iCWRK)
                  Ene(iCWRK) = Evt%CWRK%E(iCWRK)
                  T(iCWRK) = Evt%CWRK%T(iCWRK)
                  X(iCWRK) = Evt%CWRK%X(iCWRK)
                  Y(iCWRK) = Evt%CWRK%Y(iCWRK)
                  Z(iCWRK) = Evt%CWRK%Z(iCWRK)
               END DO
            ELSE
               IF (NCHit == 0) THEN
                  CWRKErrorCounter(2) = CWRKErrorCounter(2) + 1
               ELSE
                  CWRKErrorCounter(3) = CWRKErrorCounter(3) + 1
               END IF
               NCHit = 0
            END IF
         ELSE
            CWRKErrorCounter(1) = CWRKErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block cele
C-----------------------------------------------------------------------
      IF (CELEFLAG) THEN
         NCel = 0.
         DO iCELE=1, 2000
            ICl(iCELE) = 0.
            Det(iCELE) = 0.
            Wed(iCELE) = 0.
            Pla(iCELE) = 0.
            Col(iCELE) = 0.
            Ea(iCELE) = 0.
            Ta(iCELE) = 0.
            Eb(iCELE) = 0.
            Tb(iCELE) = 0.
            EMc(iCELE) = 0.
            TMc(iCELE) = 0.
            XMc(iCELE) = 0.
            YMc(iCELE) = 0.
            ZMc(iCELE) = 0.
            PTyp(iCELE) = 0.
            KNum(iCELE) = 0.
            NHit(iCELE) = 0.
         END DO
   
         ISTAT = BLOCAT(IW,'CELE', 1, IND1, INDDAT)
         IF (ISTAT.EQ.YESUCC) THEN
            istat = GETCELESTRU(Evt%Cele)
   
            NCel = Evt%Cele%n 
C            WRITE(*,*) "[DEBUG] NCel: ", NCel
            IF ( NCel > 0 .AND. NCel <= 2000 ) THEN
               DO iCELE=1, NCel
                 ICl(iCELE) = Evt%Cele%icl(iCELE)
                 Det(iCELE) = Evt%Cele%det(iCELE)
                 Wed(iCELE) = Evt%Cele%wed(iCELE)
                 Pla(iCELE) = Evt%Cele%pla(iCELE)
                 Col(iCELE) = Evt%Cele%col(iCELE)
                 Ea(iCELE) = Evt%Cele%Ea(iCELE)
                 Ta(iCELE) = Evt%Cele%ta(iCELE)
                 Eb(iCELE) = Evt%Cele%Eb(iCELE)
                 Tb(iCELE) = Evt%Cele%tb(iCELE)
               END DO
            ELSE
               IF (NCel == 0) THEN
                  CeleErrorCounter(2) = CeleErrorCounter(2) + 1
               ELSE
                  CeleErrorCounter(3) = CeleErrorCounter(3) + 1
               END IF
               NCel = 0
            END IF
C         
C           Fill MC data only if they exist, otherwise don't create empty structures         
C
            IF (MONTECARLOFLAG) THEN
              NCel = 0.
              DO iCELEMC=1, 2000
                 EMc(iCELEMC) = 0.
                 TMc(iCELEMC) = 0.
                 XMc(iCELEMC) = 0.
                 YMc(iCELEMC) = 0.
                 ZMc(iCELEMC) = 0.
                 PTyp(iCELEMC) = 0.
                 KNum(iCELEMC) = 0.
                 NHit(iCELEMC) = 0.
              END DO
        
              NCelMc = Evt%Cele%nmc
              IF (NCelMc > 0 .AND. NCelMc <= 2000) THEN
                 DO iCELEMC=1, NCelMc
                    EMc(iCELEMC) = Evt%Cele%Etrue(iCELEMC)
                    TMc(iCELEMC) = Evt%Cele%Ttrue(iCELEMC)
                    XMc(iCELEMC) = Evt%Cele%xtrue(iCELEMC)
                    YMc(iCELEMC) = Evt%Cele%ytrue(iCELEMC)
                    ZMc(iCELEMC) = Evt%Cele%ztrue(iCELEMC)
                    PTyp(iCELEMC) = Evt%Cele%ptyp(iCELEMC)
                    KNum(iCELEMC) = Evt%Cele%knum(iCELEMC)
                    NHit(iCELEMC) = Evt%Cele%numpar(iCELEMC)
                 END DO
              ELSE
                 IF (NCelMc == 0) THEN
                    CeleErrorCounter(2) = CeleErrorCounter(2) + 1
                 ELSE
                    CeleErrorCounter(3) = CeleErrorCounter(3) + 1
                 END IF
                 NCelMc = 0
              END IF
            END IF
         ELSE
            CeleErrorCounter(1) = CeleErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block dtce
C-----------------------------------------------------------------------
      IF (DTCEFLAG) THEN
         nDTCE = 0.
         nSmall = 0.
         DO iDTCE=1, 1500
            iLayerDTCE(iDTCE) = 0.
            iWireDTCE(iDTCE) = 0.
            tDTCE(iDTCE) = 0.
         END DO

         status = BLOCAT(IW, 'DTCE', 1, IND, INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            CALL GETDTCESTRU(Evt%DTCE)
      
            nDTCE = Evt%DTCE%nDTCE
C            WRITE(*,*) "[DEBUG] nDTCE: ", nDTCE
            
            nSmall = Evt%DTCE%nSmall
            IF ( nSmall < 0 .OR. nSmall > 1500 ) THEN
               DTCEErrorCounter(4) = DTCEErrorCounter(4) + 1
            END IF
      
            IF (nDTCE > 0 .AND. nDTCE <= 1500) THEN
               DO iDTCE=1, nDTCE
                  iLayerDTCE(iDTCE) = Evt%DTCE%iLayerDTCE(iDTCE)
                  IF ( iLayerDTCE(iDTCE) < 1 .OR. iLayerDTCE(iDTCE) > 58 ) THEN
                     DTCEErrorCounter(4) = DTCEErrorCounter(4) + 1
                  END IF
                  iWireDTCE(iDTCE) = Evt%DTCE%iWireDTCE(iDTCE)
                  IF ( iWireDTCE(iDTCE) < 1 .OR. iWireDTCE(iDTCE) > 378 ) THEN
                     DTCEErrorCounter(4) = DTCEErrorCounter(4) + 1
                  END IF
                  tDTCE(iDTCE) = Evt%DTCE%tDTCE(iDTCE)
               END DO
            ELSE
               IF (nDTCE == 0) THEN
                  DTCEErrorCounter(2) = DTCEErrorCounter(2) + 1
               ELSE
                  DTCEErrorCounter(3) = DTCEErrorCounter(3) + 1
               END IF
               nDTCE = 0
            END IF
         ELSE
            DTCEErrorCounter(1) = DTCEErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block dtce0
C-----------------------------------------------------------------------
      IF (DTCE0FLAG) THEN
         nDTCE0 = 0.
         DO iDTCE0=1, 1500
            iLayerDTCE0(iDTCE0) = 0.
            iWireDTCE0(iDTCE0) = 0.
            tDTCE0(iDTCE0) = 0.
         END DO
C  
C        DTCEStru is initialized in raw2dtce.cin
C   
         STATUS = BLOCAT(IW, 'DCHR', 1, IND, INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            nDTCE0 = DTCEStru%NEle
      
            IF ( nDTCE0 > 0 .AND. nDTCE0 <= 1500 ) THEN
               DO iDTCE0=1, nDTCE0
                  iLayerDTCE0(iDTCE0) = DTCEStru%Lay(iDTCE0)
                  IF ( iLayerDTCE0(iDTCE0) < 1 .OR. iLayerDTCE0(iDTCE0) > 58 ) THEN
                     DTCE0ErrorCounter(4) = DTCE0ErrorCounter(4) + 1
                  END IF
                  iWireDTCE0(iDTCE0) = DTCEStru%Wir(iDTCE0)
                  IF ( iWireDTCE0(iDTCE0) < 1 .OR. iWireDTCE0(iDTCE0) > 378 ) THEN
                     DTCE0ErrorCounter(4) = DTCE0ErrorCounter(4) + 1
                  END IF
                  tDTCE0(iDTCE0) = DTCEStru%Time(iDTCE0)
               END DO
            ELSE
               DTCE0ErrorCounter(1) = DTCE0ErrorCounter(1) + 1
               nDTCE0 = 0
            END IF
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block dchits
C-----------------------------------------------------------------------
      IF (DCHITSFLAG) THEN
         nDCHR = 0.
         nSmallDCm = 0.
         nSmallDCp = 0.
         nBigDCm = 0.
         nBigDCp = 0.
         nCellDC = 0.
         nSmallDC = 0.
C   
C        DTCEStru is initialized in raw2dtce.cin
C        TODO: BLOCAT some data?
C
         nDCHR = DTCEStru%nDCHR
         nSmallDCm = DTCEStru%nSmallDCm
         nSmallDCp = DTCEStru%nSmallDCp
         nBigDCm = DTCEStru%nBigDCm
         nBigDCp = DTCEStru%nBigDCp
         nCellDC = Evt%DTCE%nDTCE
         nSmallDC = Evt%DTCE%nSmall
      END IF
C-----------------------------------------------------------------------
C Fill Block dhre
C-----------------------------------------------------------------------
      IF (DHREFLAG) THEN
         nDHRE = 0.
         DO iDHRE=1, 1500
           iLayerDHRE(iDHRE) = 0.
           iWireDHRE(iDHRE) = 0.
           iTrkDHRE(iDHRE) = 0.
           rDHRE(iDHRE) = 0.
           eDHRE(iDHRE) = 0.
         END DO

         STATUS = BLOCAT(IW, 'DHRE', 1, IND, INDDAT1)
         if (STATUS.EQ.YESUCC) then
            istat = GETDHRESTRU(Evt%DHRE) 
   
            nDHRE = Evt%DHRE%nDHRE
C            WRITE(*,*) "[DEBUG] nDHRE: ", nDHRE
   
            IF (nDHRE > 0 .AND. nDHRE <= 1500) THEN
               DO iDHRE=1, nDHRE
                  iLayerDHRE(iDHRE) = Evt%DHRE%iLayerDHRE(iDHRE)
                  IF ( iLayerDHRE(iDHRE) < 1 .OR. iLayerDHRE(iDHRE) > 58 ) THEN
                     DHREErrorCounter(4) = DHREErrorCounter(4) + 1
                  END IF
                  iWireDHRE(iDHRE) = Evt%DHRE%iWireDHRE(iDHRE)
                  IF ( iWireDHRE(iDHRE) < 1 .OR. iWireDHRE(iDHRE) > 378 ) THEN
                     DHREErrorCounter(4) = DHREErrorCounter(4) + 1
                  END IF
                    iTrkDHRE(iDHRE) = Evt%DHRE%iTrkDHRE(iDHRE)
                    rDHRE(iDHRE) = Evt%DHRE%rDHRE(iDHRE)
                    eDHRE(iDHRE) = Evt%DHRE%eDHRE(iDHRE)
              END DO
            ELSE
               IF (nDHRE == 0) THEN
                  DHREErrorCounter(2) = DHREErrorCounter(2) + 1
               ELSE
                  DHREErrorCounter(3) = DHREErrorCounter(3) + 1
               END IF
               nDHRE = 0
            END IF
         ELSE
            DHREErrorCounter(1) = DHREErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block dhsp
C-----------------------------------------------------------------------
      IF (DHSPFLAG) THEN
         nDHSP = 0.
         DO iDHSP=1, 500
            TrkDh(iDHSP) = 0.
            Layer(iDHSP) = 0.
            Wire(iDHSP) = 0.
            Time(iDHSP) = 0.
            DPar(iDHSP) = 0.
            Res(iDHSP) = 0.
            XDh(iDHSP) = 0.
            YDh(iDHSP) = 0.
            ZDh(iDHSP) = 0.
         END DO
C
C        DHSP get function requires DTCE2, DHRE1, DHRE2 and
C        for each track that has DTFS, it also have DHSP.
C        Then, initially check the existance of the blocks.
C
         STATUS = BLOCAT(IW, 'DTCE', 2, IND, INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BLOCAT(IW, 'DHRE', 1, IND, INDDAT)
         END IF
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BLOCAT(IW, 'DHRE', 2, IND, INDDAT)
         END IF
C        
C        Here, STATUS is true only if DTCE2, DHRE1, DHRE2 exist.
C        Then, loop over the tracks and check DTFS and DHSP.
C
         DO iDHSP = 1, nT 
            ISTAT = BLOCAT(IW, 'DTFS', iDHSP, IND, INDDAT)
            IF (ISTAT.EQ.YESUCC .AND. STATUS.EQ.YESUCC) THEN
               STATUS = BLOCAT(IW,'DHSP', iDHSP, IND, INDDAT)
            END IF
         END DO
         
         IF (STATUS.EQ.YESUCC) THEN
            istat =  GETDHSPSTRU(evt%trk%n,evt%dhsp)
      
            nDHSP = Evt%DHSP%numDHSP
C            WRITE(*,*) "[DEBUG] nDHSP: ", nDHSP
      
            IF (nDHSP > 0 .AND. nDHSP <= 500) THEN
              DO iDHSP=1, nDHSP
                 TrkDh(iDHSP) = Evt%DHSP%itrk(iDHSP)
                 Layer(iDHSP) = Evt%Dhsp%layer(iDHSP)
                 Wire(iDHSP) = Evt%Dhsp%wire(iDHSP)
                 Time(iDHSP) = Evt%Dhsp%time(iDHSP)
                 DPar(iDHSP) = Evt%Dhsp%drift(iDHSP)
                 Res(iDHSP) = Evt%Dhsp%res(iDHSP)
                 XDh(iDHSP) = Evt%Dhsp%x(iDHSP)
                 YDh(iDHSP) = Evt%Dhsp%y(iDHSP)
                 ZDh(iDHSP) = Evt%Dhsp%z(iDHSP)
              END DO
            ELSE
               IF (nDHSP == 0) THEN
                  DHSPErrorCounter(2) = DHSPErrorCounter(2) + 1
               ELSE
                  DHSPErrorCounter(3) = DHSPErrorCounter(3) + 1
               END IF
               nDHSP = 0
            END IF
         ELSE
            DHSPErrorCounter(1) = DHSPErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block trkv
C-----------------------------------------------------------------------
      IF (TRKVFLAG) THEN
         nTv = 0.
         DO iTRKV=1, 30
           iV(iTRKV) = 0.
           TrkNumV(iTRKV) = 0.
           CurV(iTRKV) = 0.
           PhiV(iTRKV) = 0.
           CoTv(iTRKV) = 0.
           PxTv(iTRKV) = 0.
           PyTv(iTRKV) = 0.
           PzTv(iTRKV) = 0.
           pModV(iTRKV) = 0.
           LenV(iTRKV) = 0.
           ChiV(iTRKV) = 0.
           PidTv(iTRKV) = 0.
           Cov11Tv(iTRKV) = 0.
           Cov12Tv(iTRKV) = 0.
           Cov13Tv(iTRKV) = 0.
           Cov22Tv(iTRKV) = 0.
           Cov23Tv(iTRKV) = 0.
           Cov33Tv(iTRKV) = 0.
         END DO

         STATUS = BIGEST(IW, 'DVFS', BNKNUM)
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BLOCAT(IW, 'DVFS', BNKNUM, IND, INDDAT)
         END IF
         
         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = TRKV2STRU(evt%vtx,evt%trkv,evt%trk,evt%trkmc)
   
            nTv = Evt%Trkv%n
C            WRITE(*,*) "[DEBUG] nTv: ", nTv
   
            IF (nTv > 0 .AND. nTv <= 30) THEN
               DO iTRKV=1, nTv
                  iV(iTRKV) = Evt%Trkv%iv(iTRKV)
                  IF ( iV(iTRKV) < 0 .OR. iV(iTRKV) > 30 ) THEN
                     TrkVErrorCounter(4) = TrkVErrorCounter(4) + 1
                  END IF
                  TrkNumV(iTRKV) = Evt%Trkv%trkpoi(iTRKV)
                  IF ( TrkNumV(iTRKV) < 0 .OR. TrkNumV(iTRKV) > 999 ) THEN
                     TrkVErrorCounter(4) = TrkVErrorCounter(4) + 1
                  END IF
                    CurV(iTRKV) = Evt%Trkv%cur(iTRKV)
                    PhiV(iTRKV) = Evt%Trkv%phi(iTRKV)
                    CoTv(iTRKV) = Evt%Trkv%cot(iTRKV)
                    PxTv(iTRKV) = Evt%Trkv%px(iTRKV)
                    PyTv(iTRKV) = Evt%Trkv%py(iTRKV)
                    PzTv(iTRKV) = Evt%Trkv%pz(iTRKV)
                    pModV(iTRKV) = Evt%Trkv%pmod(iTRKV)
                    LenV(iTRKV) = Evt%Trkv%Length(iTRKV)
                    ChiV(iTRKV) = Evt%Trkv%Chi2(iTRKV)
                    PidTv(iTRKV) = Evt%Trkv%ipid(iTRKV)
                    Cov11Tv(iTRKV) = Evt%Trkv%cov11(iTRKV)
                    Cov12Tv(iTRKV) = Evt%Trkv%cov12(iTRKV)
                    Cov13Tv(iTRKV) = Evt%Trkv%cov13(iTRKV)
                    Cov22Tv(iTRKV) = Evt%Trkv%cov22(iTRKV)
                    Cov23Tv(iTRKV) = Evt%Trkv%cov23(iTRKV)
                    Cov33Tv(iTRKV) = Evt%Trkv%cov33(iTRKV)
              END DO
            ELSE
               IF (nTv == 0) THEN
                  TrkVErrorCounter(2) = TrkVErrorCounter(2) + 1
               ELSE
                  TrkVErrorCounter(3) = TrkVErrorCounter(2) + 1
               END IF
               nTv = 0
            END IF
         ELSE
            TrkVErrorCounter(1) = TrkVErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Vertices
C-----------------------------------------------------------------------
      IF (VTXFLAG) THEN
         nV = 0.
         DO iVTX=1, 10
           Vetx(iVTX) = 0.
           xV(iVTX) = 0.
           yV(iVTX) = 0.
           zV(iVTX) = 0.
           ChiVtx(iVTX) = 0.
           QuaLv(iVTX) = 0.
           FitiDv(iVTX) = 0.
           VTXCov1(iVTX) = 0.
           VTXCov2(iVTX) = 0.
           VTXCov3(iVTX) = 0.
           VTXCov4(iVTX) = 0.
           VTXCov5(iVTX) = 0.
           VTXCov6(iVTX) = 0.
         END DO

         STATUS = BIGEST(IW, 'DVFS', BNKNUM)
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BLOCAT(IW, 'DVFS', BNKNUM, IND, INDDAT)
         END IF
         
         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = TRKV2STRU(evt%vtx,evt%trkv,evt%trk,evt%trkmc)
   
            nV = Evt%vtx%n
C            WRITE(*,*) "[DEBUG] nV: ", nV
   
            IF (nV > 0 .AND. nV <= 10) THEN
               DO iVTX=1, nV
                  Vetx(iVTX) = Evt%Vtx%Ntrk(iVTX)
                  IF ( Vetx(iVTX) < 0 .OR. Vetx(iVTX) > 10 ) THEN
                     VtxErrorCounter(4) = VtxErrorCounter(4) + 1
                  END IF
                  xV(iVTX) = Evt%Vtx%X(iVTX)
                  yV(iVTX) = Evt%Vtx%Y(iVTX)
                  zV(iVTX) = Evt%Vtx%Z(iVTX)
                  ChiVtx(iVTX) = Evt%Vtx%Chi2(iVTX)
                  QuaLv(iVTX) = Evt%Vtx%Qual(iVTX)
                  FitiDv(iVTX) = Evt%Vtx%Fitid(iVTX)
                  VTXCov1(iVTX) = Evt%Vtx%Cov1(iVTX)
                  VTXCov2(iVTX) = Evt%Vtx%Cov2(iVTX)
                  VTXCov3(iVTX) = Evt%Vtx%Cov3(iVTX)
                  VTXCov4(iVTX) = Evt%Vtx%Cov4(iVTX)
                  VTXCov5(iVTX) = Evt%Vtx%Cov5(iVTX)
                  VTXCov6(iVTX) = Evt%Vtx%Cov6(iVTX)
              END DO
            ELSE
               IF (nV == 0) THEN
                  VtxErrorCounter(2) = VtxErrorCounter(2) + 1
               ELSE
                  VtxErrorCounter(3) = VtxErrorCounter(3) + 1
               END IF
               nV = 0
            END IF
         ELSE
            VtxErrorCounter(1) = VtxErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block trks
C-----------------------------------------------------------------------
      IF (TRKSFLAG) THEN
         nT = 0.
         DO iTRKS=1, 100
           TrkInd(iTRKS) = 0.
           TrkVer(iTRKS) = 0.
           Cur(iTRKS) = 0.
           Phi(iTRKS) = 0.
           Cot(iTRKS) = 0.
           Pxt(iTRKS) = 0.
           Pyt(iTRKS) = 0.
           Pzt(iTRKS) = 0.
           PMod(iTRKS) = 0.
           Len(iTRKS) = 0.
           xFirst(iTRKS) = 0.
           yFirst(iTRKS) = 0.
           zFirst(iTRKS) = 0.
           CurLa(iTRKS) = 0.
           PhiLa(iTRKS) = 0.
           CotLa(iTRKS) = 0.
           PxtLa(iTRKS) = 0.
           PytLa(iTRKS) = 0.
           PztLa(iTRKS) = 0.
           PModLa(iTRKS) = 0.
           SPca(iTRKS) = 0.
           SZeta(iTRKS) = 0.
           SCurV(iTRKS) = 0.
           SCotG(iTRKS) = 0.
           SPhi(iTRKS) = 0.
           xLast(iTRKS) = 0.
           yLast(iTRKS) = 0.
           zLast(iTRKS) = 0.
           xPca2(iTRKS) = 0.
           yPca2(iTRKS) = 0.
           zPca2(iTRKS) = 0.
           QTrk2(iTRKS) = 0.
           CotPca2(iTRKS) = 0.
           PhiPca2(iTRKS) = 0.
           nPrHit(iTRKS) = 0.
           nFitHit(iTRKS) = 0.
           nMskInk(iTRKS) = 0.
           Chi2Fit(iTRKS) = 0.
           Chi2Ms(iTRKS) = 0.
         END DO

         STATUS = BIGEST(IW, 'DVFS', BNKNUM)
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BLOCAT(IW, 'DVFS', BNKNUM, IND, INDDAT)
         END IF
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BIGEST(IW, 'DTFS', BNKNUM)
         END IF
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BLOCAT(IW, 'DTFS', BNKNUM, IND, INDDAT)
         END IF
         
         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = TRKV2STRU(evt%vtx,evt%trkv,evt%trk,evt%trkmc)
   
            nT = Evt%Trk%n
C            WRITE(*,*) "[DEBUG] nT: ", nT
   
            IF (nT > 0 .AND. nT <= 100) THEN
               DO iTRKS=1, nT
                    TrkInd(iTRKS) = Evt%Trk%trkind(iTRKS)
                    TrkVer(iTRKS) = Evt%Trk%version(iTRKS)
                    Cur(iTRKS) = Evt%Trk%cur(iTRKS)
                    Phi(iTRKS) = Evt%Trk%phi(iTRKS)
                    Cot(iTRKS) = Evt%Trk%cot(iTRKS)
                    Pxt(iTRKS) = Evt%Trk%px(iTRKS)
                    Pyt(iTRKS) = Evt%Trk%py(iTRKS)
                    Pzt(iTRKS) = Evt%Trk%pz(iTRKS)
                    PMod(iTRKS) = Evt%Trk%pmod(iTRKS)
                    Len(iTRKS) = Evt%Trk%length(iTRKS)
                    xFirst(iTRKS) = Evt%Trk%x(iTRKS)
                    yFirst(iTRKS) = Evt%Trk%y(iTRKS)
                    zFirst(iTRKS) = Evt%Trk%z(iTRKS)
                    CurLa(iTRKS) = Evt%Trk%curlast(iTRKS)
                    PhiLa(iTRKS) = Evt%Trk%philast(iTRKS)
                    CotLa(iTRKS) = Evt%Trk%cotlast(iTRKS)
                    PxtLa(iTRKS) = Evt%Trk%pxlast(iTRKS)
                    PytLa(iTRKS) = Evt%Trk%pylast(iTRKS)
                    PztLa(iTRKS) = Evt%Trk%pzlast(iTRKS)
                    PModLa(iTRKS) = Evt%Trk%pmodlast(iTRKS)
                    SPca(iTRKS) = Evt%Trk%SigPCA(iTRKS)
                    SZeta(iTRKS) = Evt%Trk%SigZeta(iTRKS)
                    SCurV(iTRKS) = Evt%Trk%SigCurv(iTRKS)
                    SCotG(iTRKS) = Evt%Trk%SigCot(iTRKS)
                    SPhi(iTRKS) = Evt%Trk%SigPhi(iTRKS)
                    xLast(iTRKS) = Evt%Trk%xlast(iTRKS)
                    yLast(iTRKS) = Evt%Trk%ylast(iTRKS)
                    zLast(iTRKS) = Evt%Trk%zlast(iTRKS)
                    xPca2(iTRKS) = Evt%Trk%xpca(iTRKS)
                    yPca2(iTRKS) = Evt%Trk%ypca(iTRKS)
                    zPca2(iTRKS) = Evt%Trk%zpca(iTRKS)
                    QTrk2(iTRKS) = Evt%Trk%qtrk(iTRKS)
                    CotPca2(iTRKS) = Evt%Trk%cotpca(iTRKS)
                    PhiPca2(iTRKS) = Evt%Trk%phipca(iTRKS)
                    nPrHit(iTRKS) = Evt%Trk%NumPRhit(iTRKS)
                    nFitHit(iTRKS) = Evt%Trk%NumFitHit(iTRKS)
                    nMskInk(iTRKS) = Evt%Trk%nmskink(iTRKS)
                    Chi2Fit(iTRKS) = Evt%Trk%chi2fit(iTRKS)
                    Chi2Ms(iTRKS) = Evt%Trk%chi2ms(iTRKS)
              END DO
            ELSE
               IF (nTfMC == 0) THEN
                  TrksErrorCounter(2) = TrksErrorCounter(2) + 1
               ELSE
                  TrksErrorCounter(3) = TrksErrorCounter(3) + 1
               END IF
               nT = 0
            END IF
   
C         
C           Fill MC data only if they exist, otherwise don't create empty structures         
C
            IF (MONTECARLOFLAG) THEN
              nTfMC = 0.
              DO iTRKMC=1, 100
                NConTr(iTRKMC) = 0.
                TrkIne1(iTRKMC) = 0.
                TrType1(iTRKMC) = 0.
                TrHits1(iTRKMC) = 0.
                TrkIne2(iTRKMC) = 0.
                TrType2(iTRKMC) = 0.
                TrHits2(iTRKMC) = 0.
                TrkIn3(iTRKMC) = 0.
                TrType3(iTRKMC) = 0.
                TrHits3(iTRKMC) = 0.
                xFMC(iTRKMC) = 0.
                yFMC(iTRKMC) = 0.
                zFMC(iTRKMC) = 0.
                PxFMC(iTRKMC) = 0.
                PyFMC(iTRKMC) = 0.
                PzFMC(iTRKMC) = 0.
                xLMC(iTRKMC) = 0.
                yLMC(iTRKMC) = 0.
                zLMC(iTRKMC) = 0.
                PxLMC(iTRKMC) = 0.
                PyLMC(iTRKMC) = 0.
                PzLMC(iTRKMC) = 0.
                xFMC2(iTRKMC) = 0.
                yFMC2(iTRKMC) = 0.
                zFMC2(iTRKMC) = 0.
                PxFMC2(iTRKMC) = 0.
                PyFMC2(iTRKMC) = 0.
                PzFMC2(iTRKMC) = 0.
                xLMC2(iTRKMC) = 0.
                yLMC2(iTRKMC) = 0.
                zLMC2(iTRKMC) = 0.
                PxLMC2(iTRKMC) = 0.
                PyLMC2(iTRKMC) = 0.
                PzLMC2(iTRKMC) = 0.
              END DO
     
              nTfMC = Evt%TrkMC%n
C              WRITE(*,*) "[DEBUG] nTfMC: ", nTfMC
     
              IF (nTfMC > 0 .AND. nTfMC <= 100) THEN
                 DO iTRKMC=1, nTfMC
                    NConTr(iTRKMC) = Evt%TrkMC%ncontr(iTRKMC)
                    IF ( NConTr(iTRKMC) < 0 .OR. NConTr(iTRKMC) > 10 ) THEN
                       TrksErrorCounter(4) = TrksErrorCounter(4) + 1
                    END IF
                    TrkIne1(iTRKMC) = Evt%TrkMC%kine1(iTRKMC)
                    IF ( TrkIne1(iTRKMC) < 0 .OR. TrkIne1(iTRKMC) > 100 ) THEN
                       TrksErrorCounter(4) = TrksErrorCounter(4) + 1
                    END IF
                    TrType1(iTRKMC) = Evt%TrkMC%type1(iTRKMC)
                    IF ( TrType1(iTRKMC) < 0 .OR. TrType1(iTRKMC) > 100 ) THEN
                       TrksErrorCounter(4) = TrksErrorCounter(4) + 1
                    END IF
                    TrHits1(iTRKMC) = Evt%TrkMC%hits1(iTRKMC)
                    IF ( TrHits1(iTRKMC) < 0 .OR. TrHits1(iTRKMC) > 1000 ) THEN
                       TrksErrorCounter(4) = TrksErrorCounter(4) + 1
                    END IF
                    TrkIne2(iTRKMC) = Evt%TrkMC%kine2(iTRKMC)
                    IF ( TrkIne2(iTRKMC) < 0 .OR. TrkIne2(iTRKMC) > 100 ) THEN
                       TrksErrorCounter(4) = TrksErrorCounter(4) + 1
                    END IF
                    TrType2(iTRKMC) = Evt%TrkMC%type2(iTRKMC)
                    IF ( TrType2(iTRKMC) < 0 .OR. TrType2(iTRKMC) > 100 ) THEN
                       TrksErrorCounter(4) = TrksErrorCounter(4) + 1
                    END IF
                    TrHits2(iTRKMC) = Evt%TrkMC%hits2(iTRKMC)
                    IF ( TrHits2(iTRKMC) < 0 .OR. TrHits2(iTRKMC) > 1000 ) THEN
                       TrksErrorCounter(4) = TrksErrorCounter(4) + 1
                    END IF
                    TrkIn3(iTRKMC) = Evt%TrkMC%kine3(iTRKMC)
                    IF ( TrkIn3(iTRKMC) < 0 .OR. TrkIn3(iTRKMC) > 100 ) THEN
                       TrksErrorCounter(4) = TrksErrorCounter(4) + 1
                    END IF
                    TrType3(iTRKMC) = Evt%TrkMC%type3(iTRKMC)
                    IF ( TrType3(iTRKMC) < 0 .OR. TrType3(iTRKMC) > 100 ) THEN
                       TrksErrorCounter(4) = TrksErrorCounter(4) + 1
                    END IF
                    TrHits3(iTRKMC) = Evt%TrkMC%hits3(iTRKMC)
                    IF ( TrHits3(iTRKMC) < 0 .OR. TrHits3(iTRKMC) > 1000 ) THEN
                       TrksErrorCounter(4) = TrksErrorCounter(4) + 1
                    END IF
                      xFMC(iTRKMC) = Evt%TrkMC%xfirst(iTRKMC)
                      yFMC(iTRKMC) = Evt%TrkMC%yfirst(iTRKMC)
                      zFMC(iTRKMC) = Evt%TrkMC%zfirst(iTRKMC)
                      PxFMC(iTRKMC) = Evt%TrkMC%pxfirst(iTRKMC)
                      PyFMC(iTRKMC) = Evt%TrkMC%pyfirst(iTRKMC)
                      PzFMC(iTRKMC) = Evt%TrkMC%pzfirst(iTRKMC)
                      xLMC(iTRKMC) = Evt%TrkMC%xlast(iTRKMC)
                      yLMC(iTRKMC) = Evt%TrkMC%ylast(iTRKMC)
                      zLMC(iTRKMC) = Evt%TrkMC%zlast(iTRKMC)
                      PxLMC(iTRKMC) = Evt%TrkMC%pxlast(iTRKMC)
                      PyLMC(iTRKMC) = Evt%TrkMC%pylast(iTRKMC)
                      PzLMC(iTRKMC) = Evt%TrkMC%pzlast(iTRKMC)
                      xFMC2(iTRKMC) = Evt%TrkMC%xmcfirst(iTRKMC)
                      yFMC2(iTRKMC) = Evt%TrkMC%ymcfirst(iTRKMC)
                      zFMC2(iTRKMC) = Evt%TrkMC%zmcfirst(iTRKMC)
                      PxFMC2(iTRKMC) = Evt%TrkMC%pxmcfirst(iTRKMC)
                      PyFMC2(iTRKMC) = Evt%TrkMC%pymcfirst(iTRKMC)
                      PzFMC2(iTRKMC) = Evt%TrkMC%pzmcfirst(iTRKMC)
                      xLMC2(iTRKMC) = Evt%TrkMC%xmclast(iTRKMC)
                      yLMC2(iTRKMC) = Evt%TrkMC%ymclast(iTRKMC)
                      zLMC2(iTRKMC) = Evt%TrkMC%zmclast(iTRKMC)
                      PxLMC2(iTRKMC) = Evt%TrkMC%pxmclast(iTRKMC)
                      PyLMC2(iTRKMC) = Evt%TrkMC%pymclast(iTRKMC)
                      PzLMC2(iTRKMC) = Evt%TrkMC%pzmclast(iTRKMC)
                END DO
              ELSE
                 IF (nTfMC == 0) THEN
                    TrksErrorCounter(2) = TrksErrorCounter(2) + 1
                 ELSE
                    TrksErrorCounter(3) = TrksErrorCounter(3) + 1
                 END IF
                 nTfMc = 0
              END IF
            END IF
         ELSE
            TrksErrorCounter(1) = TrksErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block trkvold
C-----------------------------------------------------------------------
      IF (TRKVOLDFLAG) THEN
         nTVOld = 0.
         DO iTRKVOLD=1, 30
           iVOld(iTRKVOLD) = 0.
           TrkNumVOld(iTRKVOLD) = 0.
           CurVOld(iTRKVOLD) = 0.
           PhiVOld(iTRKVOLD) = 0.
           CotVOld(iTRKVOLD) = 0.
           PxTVOld(iTRKVOLD) = 0.
           PyTVOld(iTRKVOLD) = 0.
           PzTVOld(iTRKVOLD) = 0.
           PModVOld(iTRKVOLD) = 0.
           LenVOld(iTRKVOLD) = 0.
           ChiVOld(iTRKVOLD) = 0.
           PidTVOld(iTRKVOLD) = 0.
           Cov11TVOld(iTRKVOLD) = 0.
           Cov12TVOld(iTRKVOLD) = 0.
           Cov13TVOld(iTRKVOLD) = 0.
           Cov22TVOld(iTRKVOLD) = 0.
           Cov23TVOld(iTRKVOLD) = 0.
           Cov33TVOld(iTRKVOLD) = 0.
         END DO

         STATUS = BIGEST(IW, 'DVF1', BNKNUM)
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BLOCAT(IW, 'DVF1', BNKNUM, IND, INDDAT)
         END IF

         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = TRKVOLD2STRU(evt%vtxold, evt%trkvold, evt%trkold, evt%trkmcold)
   
            nTVOld = Evt%TrkvOld%n
C            WRITE(*,*) "[DEBUG] nDHRE: ", nDHRE
   
            IF (nTVOld > 0 .AND. nTVOld <= 30) THEN
               DO iTRKVOLD=1, nTVOld
                  iVOld(iTRKVOLD) = Evt%TrkvOld%iv(iTRKVOLD)
                  IF ( iVOld(iTRKVOLD) < 0 .OR. iVOld(iTRKVOLD) > 30 ) THEN
                     TrkVOldErrorCounter(4) = TrkVOldErrorCounter(4) + 1
                  END IF
                  TrkNumVOld(iTRKVOLD) = Evt%Trkvold%trkpoi(iTRKVOLD)
                  IF ( TrkNumVOld(iTRKVOLD) < 0 .OR. TrkNumVOld(iTRKVOLD) > 999 ) THEN
                     TrkVOldErrorCounter(4) = TrkVOldErrorCounter(4) + 1
                  END IF
                    CurVOld(iTRKVOLD) = Evt%Trkvold%cur(iTRKVOLD)
                    PhiVOld(iTRKVOLD) = Evt%Trkvold%phi(iTRKVOLD)
                    CotVOld(iTRKVOLD) = Evt%Trkvold%cot(iTRKVOLD)
                    PxTVOld(iTRKVOLD) = Evt%Trkvold%px(iTRKVOLD)
                    PyTVOld(iTRKVOLD) = Evt%Trkvold%py(iTRKVOLD)
                    PzTVOld(iTRKVOLD) = Evt%Trkvold%pz(iTRKVOLD)
                    PModVOld(iTRKVOLD) = Evt%Trkvold%pmod(iTRKVOLD)
                    LenVOld(iTRKVOLD) = Evt%Trkvold%Length(iTRKVOLD)
                    ChiVOld(iTRKVOLD) = Evt%Trkvold%Chi2(iTRKVOLD)
                    PidTVOld(iTRKVOLD) = Evt%Trkvold%ipid(iTRKVOLD)
                    Cov11TVOld(iTRKVOLD) = Evt%Trkvold%cov11(iTRKVOLD)
                    Cov12TVOld(iTRKVOLD) = Evt%Trkvold%cov12(iTRKVOLD)
                    Cov13TVOld(iTRKVOLD) = Evt%Trkvold%cov13(iTRKVOLD)
                    Cov22TVOld(iTRKVOLD) = Evt%Trkvold%cov22(iTRKVOLD)
                    Cov23TVOld(iTRKVOLD) = Evt%Trkvold%cov23(iTRKVOLD)
                    Cov33TVOld(iTRKVOLD) = Evt%Trkvold%cov33(iTRKVOLD)
              END DO
            ELSE
               IF (nTVOld == 0) THEN
                  TrkVOldErrorCounter(2) = TrkVOldErrorCounter(2) + 1
               ELSE
                  TrkVOldErrorCounter(3) = TrkVOldErrorCounter(3) + 1
               END IF
               nTVOld = 0
            END IF
         ELSE
            TrkVOldErrorCounter(1) = TrkVOldErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block vtxold
C-----------------------------------------------------------------------
      IF (VTXOLDFLAG) THEN
         nVOld = 0.
         DO iVTXOLD=1, 10
           VtxOld(iVTXOLD) = 0.
           xVOld(iVTXOLD) = 0.
           yVOld(iVTXOLD) = 0.
           ZVOld(iVTXOLD) = 0.
           ChiVTxOld(iVTXOLD) = 0.
           QuaLVOld(iVTXOLD) = 0.
           FitIdVOld(iVTXOLD) = 0.
           VtxCov1Old(iVTXOLD) = 0.
           VtxCov2Old(iVTXOLD) = 0.
           VtxCov3Old(iVTXOLD) = 0.
           VtxCov4Old(iVTXOLD) = 0.
           VtxCov5Old(iVTXOLD) = 0.
           VtxCov6Old(iVTXOLD) = 0.
         END DO

         STATUS = BIGEST(IW, 'DVF1', BNKNUM)
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BLOCAT(IW, 'DVF1', BNKNUM, IND, INDDAT)
         END IF

         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = TRKVOLD2STRU(evt%vtxold, evt%trkvold, evt%trkold, evt%trkmcold)
   
            nVOld = Evt%vtxold%n
C            WRITE(*,*) "[DEBUG] nVOld: ", nVOld
   
            IF (nVOld > 0 .AND. nVOld <= 10) THEN
               DO iVTXOLD=1, nVOld
                  VtxOld(iVTXOLD) = Evt%Vtxold%Ntrk(iVTXOLD)
                  IF ( VtxOld(iVTXOLD) < 0 .OR. VtxOld(iVTXOLD) > 10 ) THEN
                     VtxOldErrorCounter(4) = VtxOldErrorCounter(4) + 1
                  END IF
                  xVOld(iVTXOLD) = Evt%Vtxold%X(iVTXOLD)
                  yVOld(iVTXOLD) = Evt%Vtxold%Y(iVTXOLD)
                  ZVOld(iVTXOLD) = Evt%Vtxold%Z(iVTXOLD)
                  ChiVTxOld(iVTXOLD) = Evt%Vtxold%Chi2(iVTXOLD)
                  QuaLVOld(iVTXOLD) = Evt%Vtxold%Qual(iVTXOLD)
                  FitIdVOld(iVTXOLD) = Evt%Vtxold%Fitid(iVTXOLD)
                  VtxCov1Old(iVTXOLD) = Evt%Vtxold%Cov1(iVTXOLD)
                  VtxCov2Old(iVTXOLD) = Evt%Vtxold%Cov2(iVTXOLD)
                  VtxCov3Old(iVTXOLD) = Evt%Vtxold%Cov3(iVTXOLD)
                  VtxCov4Old(iVTXOLD) = Evt%Vtxold%Cov4(iVTXOLD)
                  VtxCov5Old(iVTXOLD) = Evt%Vtxold%Cov5(iVTXOLD)
                  VtxCov6Old(iVTXOLD) = Evt%Vtxold%Cov6(iVTXOLD)
               END DO
            ELSE
               IF (nVOld == 0) THEN
                  VtxOldErrorCounter(2) = VtxOldErrorCounter(2) + 1
               ELSE
                  VtxOldErrorCounter(3) = VtxOldErrorCounter(3) + 1
               END IF
               nVOld = 0
            END IF
         ELSE
            VtxOldErrorCounter(1) = VtxOldErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block trkold
C-----------------------------------------------------------------------
      IF (TRKSOLDFLAG) THEN
         nTOld = 0.
         DO iTRKOLD=1, 100
           TrkIndOld(iTRKOLD) = 0.
           TrkVerOld(iTRKOLD) = 0.
           CurOld(iTRKOLD) = 0.
           PhiOld(iTRKOLD) = 0.
           CotOld(iTRKOLD) = 0.
           PxTOld(iTRKOLD) = 0.
           PyTOld(iTRKOLD) = 0.
           PzTOld(iTRKOLD) = 0.
           PModOld(iTRKOLD) = 0.
           LenOld(iTRKOLD) = 0.
           xFirstOld(iTRKOLD) = 0.
           yFirstOld(iTRKOLD) = 0.
           zFirstOld(iTRKOLD) = 0.
           CurLaOld(iTRKOLD) = 0.
           PhiLaOld(iTRKOLD) = 0.
           CotLaOld(iTRKOLD) = 0.
           PxTLaOld(iTRKOLD) = 0.
           PyTLaOld(iTRKOLD) = 0.
           PzTLaOld(iTRKOLD) = 0.
           PModLaOld(iTRKOLD) = 0.
           SPcaOld(iTRKOLD) = 0.
           SZetaOld(iTRKOLD) = 0.
           SCurVOld(iTRKOLD) = 0.
           SCotGOld(iTRKOLD) = 0.
           SPhiOld(iTRKOLD) = 0.
           xLastOld(iTRKOLD) = 0.
           yLastOld(iTRKOLD) = 0.
           zLastOld(iTRKOLD) = 0.
           xPca2Old(iTRKOLD) = 0.
           yPca2Old(iTRKOLD) = 0.
           zPca2Old(iTRKOLD) = 0.
           QTrk2Old(iTRKOLD) = 0.
           CotPca2Old(iTRKOLD) = 0.
           PhiPca2Old(iTRKOLD) = 0.
           nPrhiTOld(iTRKOLD) = 0.
           nFithITOld(iTRKOLD) = 0.
           nMskInkOld(iTRKOLD) = 0.
           Chi2FitOld(iTRKOLD) = 0.
           Chi2MSOld(iTRKOLD) = 0.
         END DO

C
C        Trks and TrksMC require DVF1 and DTF1 banks,
C        then here we check for both of them.
C
         STATUS = BIGEST(IW, 'DVF1', BNKNUM)
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BLOCAT(IW, 'DVF1', BNKNUM, IND, INDDAT)
         END IF
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BIGEST(IW, 'DTF1', BNKNUM)
         END IF
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BLOCAT(IW, 'DTF1', BNKNUM, IND, INDDAT)
         END IF

         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = TRKVOLD2STRU(evt%vtxold, evt%trkvold, evt%trkold, evt%trkmcold)
   
            nTOld = Evt%Trkold%n
C            WRITE(*,*) "[DEBUG] nTOld: ", nTOld
   
            IF (nTOld > 0 .AND. nTOld <= 100) THEN
               DO iTRKOLD=1, nTOld
                    TrkIndOld(iTRKOLD) = Evt%Trkold%trkind(iTRKOLD)
                    TrkVerOld(iTRKOLD) = Evt%Trkold%version(iTRKOLD)
                    CurOld(iTRKOLD) = Evt%Trkold%cur(iTRKOLD)
                    PhiOld(iTRKOLD) = Evt%Trkold%phi(iTRKOLD)
                    CotOld(iTRKOLD) = Evt%Trkold%cot(iTRKOLD)
                    PxTOld(iTRKOLD) = Evt%Trkold%px(iTRKOLD)
                    PyTOld(iTRKOLD) = Evt%Trkold%py(iTRKOLD)
                    PzTOld(iTRKOLD) = Evt%Trkold%pz(iTRKOLD)
                    PModOld(iTRKOLD) = Evt%Trkold%pmod(iTRKOLD)
                    LenOld(iTRKOLD) = Evt%Trkold%length(iTRKOLD)
                    xFirstOld(iTRKOLD) = Evt%Trkold%x(iTRKOLD)
                    yFirstOld(iTRKOLD) = Evt%Trkold%y(iTRKOLD)
                    zFirstOld(iTRKOLD) = Evt%Trkold%z(iTRKOLD)
                    CurLaOld(iTRKOLD) = Evt%Trkold%curlast(iTRKOLD)
                    PhiLaOld(iTRKOLD) = Evt%Trkold%philast(iTRKOLD)
                    CotLaOld(iTRKOLD) = Evt%Trkold%cotlast(iTRKOLD)
                    PxTLaOld(iTRKOLD) = Evt%Trkold%pxlast(iTRKOLD)
                    PyTLaOld(iTRKOLD) = Evt%Trkold%pylast(iTRKOLD)
                    PzTLaOld(iTRKOLD) = Evt%Trkold%pzlast(iTRKOLD)
                    PModLaOld(iTRKOLD) = Evt%Trkold%pmodlast(iTRKOLD)
                    SPcaOld(iTRKOLD) = Evt%Trkold%SigPCA(iTRKOLD)
                    SZetaOld(iTRKOLD) = Evt%Trkold%SigZeta(iTRKOLD)
                    SCurVOld(iTRKOLD) = Evt%Trkold%SigCurv(iTRKOLD)
                    SCotGOld(iTRKOLD) = Evt%Trkold%SigCot(iTRKOLD)
                    SPhiOld(iTRKOLD) = Evt%Trkold%SigPhi(iTRKOLD)
                    xLastOld(iTRKOLD) = Evt%Trkold%xlast(iTRKOLD)
                    yLastOld(iTRKOLD) = Evt%Trkold%ylast(iTRKOLD)
                    zLastOld(iTRKOLD) = Evt%Trkold%zlast(iTRKOLD)
                    xPca2Old(iTRKOLD) = Evt%Trkold%xpca(iTRKOLD)
                    yPca2Old(iTRKOLD) = Evt%Trkold%ypca(iTRKOLD)
                    zPca2Old(iTRKOLD) = Evt%Trkold%zpca(iTRKOLD)
                    QTrk2Old(iTRKOLD) = Evt%Trkold%qtrk(iTRKOLD)
                    CotPca2Old(iTRKOLD) = Evt%Trkold%cotpca(iTRKOLD)
                    PhiPca2Old(iTRKOLD) = Evt%Trkold%phipca(iTRKOLD)
                    nPrhiTOld(iTRKOLD) = Evt%Trkold%NumPRhit(iTRKOLD)
                    nFithITOld(iTRKOLD) = Evt%Trkold%NumFitHit(iTRKOLD)
                    nMskInkOld(iTRKOLD) = Evt%Trkold%nmskink(iTRKOLD)
                    Chi2FitOld(iTRKOLD) = Evt%Trkold%chi2fit(iTRKOLD)
                    Chi2MSOld(iTRKOLD) = Evt%Trkold%chi2ms(iTRKOLD)
              END DO
            ELSE
               IF (nTOld == 0) THEN
                  TrksOldErrorCounter(2) = TrksOldErrorCounter(2) + 1
               ELSE
                  TrksOldErrorCounter(3) = TrksOldErrorCounter(3) + 1
               END IF
               nTOld = 0
            END IF
C
C           Fill MC data only if they exist, otherwise don't create empty structures         
C
            IF (MONTECARLOFLAG) THEN
              nTfMCOld = 0.
              DO iTRKMCOLD=1, 100
                nContrOld(iTRKMCOLD) = 0.
                TrkIne1Old(iTRKMCOLD) = 0.
                TrType1Old(iTRKMCOLD) = 0.
                TrHits1Old(iTRKMCOLD) = 0.
                TrkIne2Old(iTRKMCOLD) = 0.
                TrType2Old(iTRKMCOLD) = 0.
                TrHits2Old(iTRKMCOLD) = 0.
                TrkIne3Old(iTRKMCOLD) = 0.
                TrType3Old(iTRKMCOLD) = 0.
                TrHits3Old(iTRKMCOLD) = 0.
                xFMCOld(iTRKMCOLD) = 0.
                yFMCOld(iTRKMCOLD) = 0.
                zFMCOld(iTRKMCOLD) = 0.
                PxFMCOld(iTRKMCOLD) = 0.
                PyFMCOld(iTRKMCOLD) = 0.
                PzFMCOld(iTRKMCOLD) = 0.
                xLMCOld(iTRKMCOLD) = 0.
                yLMCOld(iTRKMCOLD) = 0.
                zLMCOld(iTRKMCOLD) = 0.
                PxLMCOld(iTRKMCOLD) = 0.
                PyLMCOld(iTRKMCOLD) = 0.
                PzLMCOld(iTRKMCOLD) = 0.
                xFMC2Old(iTRKMCOLD) = 0.
                yFMC2Old(iTRKMCOLD) = 0.
                zFMC2Old(iTRKMCOLD) = 0.
                PxFMC2Old(iTRKMCOLD) = 0.
                PyFMC2Old(iTRKMCOLD) = 0.
                PzFMC2Old(iTRKMCOLD) = 0.
                xLMC2Old(iTRKMCOLD) = 0.
                yLMC2Old(iTRKMCOLD) = 0.
                zLMC2Old(iTRKMCOLD) = 0.
                PxLMC2Old(iTRKMCOLD) = 0.
                PyLMC2Old(iTRKMCOLD) = 0.
                PzLMC2Old(iTRKMCOLD) = 0.
              END DO
     
              nTfMCOld = Evt%Trkmcold%n
     
              IF (nTfMCOld > 0 .AND. nTfMCOld <= 100) THEN
                 DO iTRKMCOLD=1, nTfMCOld
                    nContrOld(iTRKMCOLD) = Evt%Trkmcold%ncontr(iTRKMCOLD)
                    IF ( nContrOld(iTRKMCOLD) < 0 .OR. nContrOld(iTRKMCOLD) > 10 ) THEN
                       TrksOldErrorCounter(4) = TrksOldErrorCounter(4) + 1
                    END IF
                    TrkIne1Old(iTRKMCOLD) = Evt%Trkmcold%kine1(iTRKMCOLD)
                    IF ( TrkIne1Old(iTRKMCOLD) < 0 .OR. TrkIne1Old(iTRKMCOLD) > 100 ) THEN
                       TrksOldErrorCounter(4) = TrksOldErrorCounter(4) + 1
                    END IF
                    TrType1Old(iTRKMCOLD) = Evt%Trkmcold%type1(iTRKMCOLD)
                    IF ( TrType1Old(iTRKMCOLD) < 0 .OR. TrType1Old(iTRKMCOLD) > 100 ) THEN
                       TrksOldErrorCounter(4) = TrksOldErrorCounter(4) + 1
                    END IF
                    TrHits1Old(iTRKMCOLD) = Evt%Trkmcold%hits1(iTRKMCOLD)
                    IF ( TrHits1Old(iTRKMCOLD) < 0 .OR. TrHits1Old(iTRKMCOLD) > 1000 ) THEN
                       TrksOldErrorCounter(4) = TrksOldErrorCounter(4) + 1
                    END IF
                    TrkIne2Old(iTRKMCOLD) = Evt%Trkmcold%kine2(iTRKMCOLD)
                    IF ( TrkIne2Old(iTRKMCOLD) < 0 .OR. TrkIne2Old(iTRKMCOLD) > 100 ) THEN
                       TrksOldErrorCounter(4) = TrksOldErrorCounter(4) + 1
                    END IF
                    TrType2Old(iTRKMCOLD) = Evt%Trkmcold%type2(iTRKMCOLD)
                    IF ( TrType2Old(iTRKMCOLD) < 0 .OR. TrType2Old(iTRKMCOLD) > 100 ) THEN
                       TrksOldErrorCounter(4) = TrksOldErrorCounter(4) + 1
                    END IF
                    TrHits2Old(iTRKMCOLD) = Evt%Trkmcold%hits2(iTRKMCOLD)
                    IF ( TrHits2Old(iTRKMCOLD) < 0 .OR. TrHits2Old(iTRKMCOLD) > 1000 ) THEN
                       TrksOldErrorCounter(4) = TrksOldErrorCounter(4) + 1
                    END IF
                    TrkIne3Old(iTRKMCOLD) = Evt%Trkmcold%kine3(iTRKMCOLD)
                    IF ( TrkIne3Old(iTRKMCOLD) < 0 .OR. TrkIne3Old(iTRKMCOLD) > 100 ) THEN
                       TrksOldErrorCounter(4) = TrksOldErrorCounter(4) + 1
                    END IF
                    TrType3Old(iTRKMCOLD) = Evt%Trkmcold%type3(iTRKMCOLD)
                    IF ( TrType3Old(iTRKMCOLD) < 0 .OR. TrType3Old(iTRKMCOLD) > 100 ) THEN
                       TrksOldErrorCounter(4) = TrksOldErrorCounter(4) + 1
                    END IF
                    TrHits3Old(iTRKMCOLD) = Evt%Trkmcold%hits3(iTRKMCOLD)
                    IF ( TrHits3Old(iTRKMCOLD) < 0 .OR. TrHits3Old(iTRKMCOLD) > 1000 ) THEN
                       TrksOldErrorCounter(4) = TrksOldErrorCounter(4) + 1
                    END IF
                    xFMCOld(iTRKMCOLD) = Evt%Trkmcold%xfirst(iTRKMCOLD)
                    yFMCOld(iTRKMCOLD) = Evt%Trkmcold%yfirst(iTRKMCOLD)
                    zFMCOld(iTRKMCOLD) = Evt%Trkmcold%zfirst(iTRKMCOLD)
                    PxFMCOld(iTRKMCOLD) = Evt%Trkmcold%pxfirst(iTRKMCOLD)
                    PyFMCOld(iTRKMCOLD) = Evt%Trkmcold%pyfirst(iTRKMCOLD)
                    PzFMCOld(iTRKMCOLD) = Evt%Trkmcold%pzfirst(iTRKMCOLD)
                    xLMCOld(iTRKMCOLD) = Evt%Trkmcold%xlast(iTRKMCOLD)
                    yLMCOld(iTRKMCOLD) = Evt%Trkmcold%ylast(iTRKMCOLD)
                    zLMCOld(iTRKMCOLD) = Evt%Trkmcold%zlast(iTRKMCOLD)
                    PxLMCOld(iTRKMCOLD) = Evt%Trkmcold%pxlast(iTRKMCOLD)
                    PyLMCOld(iTRKMCOLD) = Evt%Trkmcold%pylast(iTRKMCOLD)
                    PzLMCOld(iTRKMCOLD) = Evt%Trkmcold%pzlast(iTRKMCOLD)
                    xFMC2Old(iTRKMCOLD) = Evt%Trkmcold%xmcfirst(iTRKMCOLD)
                    yFMC2Old(iTRKMCOLD) = Evt%Trkmcold%ymcfirst(iTRKMCOLD)
                    zFMC2Old(iTRKMCOLD) = Evt%Trkmcold%zmcfirst(iTRKMCOLD)
                    PxFMC2Old(iTRKMCOLD) = Evt%Trkmcold%pxmcfirst(iTRKMCOLD)
                    PyFMC2Old(iTRKMCOLD) = Evt%Trkmcold%pymcfirst(iTRKMCOLD)
                    PzFMC2Old(iTRKMCOLD) = Evt%Trkmcold%pzmcfirst(iTRKMCOLD)
                    xLMC2Old(iTRKMCOLD) = Evt%Trkmcold%xmclast(iTRKMCOLD)
                    yLMC2Old(iTRKMCOLD) = Evt%Trkmcold%ymclast(iTRKMCOLD)
                    zLMC2Old(iTRKMCOLD) = Evt%Trkmcold%zmclast(iTRKMCOLD)
                    PxLMC2Old(iTRKMCOLD) = Evt%Trkmcold%pxmclast(iTRKMCOLD)
                    PyLMC2Old(iTRKMCOLD) = Evt%Trkmcold%pymclast(iTRKMCOLD)
                    PzLMC2Old(iTRKMCOLD) = Evt%Trkmcold%pzmclast(iTRKMCOLD)
                END DO
              ELSE
                 IF (nTfMCOld == 0) THEN
                    TrksOldErrorCounter(2) = TrksOldErrorCounter(2) + 1
                 ELSE
                    TrksOldErrorCounter(3) = TrksOldErrorCounter(3) + 1
                 END IF
                 nTfMCOld = 0
              END IF
            END IF
         ELSE
            TrksOldErrorCounter(1) = TrksOldErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block dhit
C-----------------------------------------------------------------------
      IF (DHITFLAG) THEN
         nDHIT = 0.
         DO iDHIT=1, 2500
           DHPid(iDHIT) = 0.
           DHKin(iDHIT) = 0.
           DHAdd(iDHIT) = 0.
           DHx(iDHIT) = 0.
           DHy(iDHIT) = 0.
           DHz(iDHIT) = 0.
           DHPx(iDHIT) = 0.
           DHPy(iDHIT) = 0.
           DHPz(iDHIT) = 0.
           DHt(iDHIT) = 0.
           DHDedx(iDHIT) = 0.
           DHTLen(iDHIT) = 0.
           DHDTime(iDHIT) = 0.
           DHDFromW(iDHIT) = 0.
           DHFlag(iDHIT) = 0.
         END DO
        
         STATUS = BIGEST(IW, 'DHIT', BNKNUM)
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BLOCAT(IW, 'DHIT', BNKNUM, IND, INDDAT)
         END IF

         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = DHIT_UPK(evt%dhit)
            
            nDHIT = Evt%DHIT%n
C            WRITE(*,*) "[DEBUG] nDHIT: ", nDHIT
   
            IF (nDHIT > 0 .AND. nDHIT <= 2500) THEN
               DO iDHIT=1, nDHIT
                    DHPid(iDHIT) = Evt%DHIT%pid(iDHIT)
                    DHKin(iDHIT) = Evt%DHIT%kinum(iDHIT)
                    DHAdd(iDHIT) = Evt%DHIT%celadr(iDHIT)
                    DHx(iDHIT) = Evt%DHIT%x(iDHIT)
                    DHy(iDHIT) = Evt%DHIT%y(iDHIT)
                    DHz(iDHIT) = Evt%DHIT%z(iDHIT)
                    DHPx(iDHIT) = Evt%DHIT%px(iDHIT)
                    DHPy(iDHIT) = Evt%DHIT%py(iDHIT)
                    DHPz(iDHIT) = Evt%DHIT%pz(iDHIT)
                    DHt(iDHIT) = Evt%DHIT%time(iDHIT)
                    DHDedx(iDHIT) = Evt%DHIT%dedx(iDHIT)
                    DHTLen(iDHIT) = Evt%DHIT%tlen(iDHIT)
                    DHDTime(iDHIT) = Evt%DHIT%dtime(iDHIT)
                    DHDFromW(iDHIT) = Evt%DHIT%dfromw(iDHIT)
                    DHFlag(iDHIT) = Evt%DHIT%flag(iDHIT)
              END DO
            ELSE
               IF (nDHIT == 0) THEN
                  DHitErrorCounter(2) = DHitErrorCounter(2) + 1
               ELSE
                  DHitErrorCounter(3) = DHitErrorCounter(3) + 1
               END IF
               nDHIT = 0
            END IF
         ELSE
            DHitErrorCounter(1) = DHitErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block dedx
C-----------------------------------------------------------------------
      IF (DEDXFLAG) THEN
         nDEDx = 0.
         DO iiDEDX=1, 20
            nADC(iiDEDX) = 0.
            IDEDx(iiDEDX) = 0.
            DO jjDEDX=1, 100
               ADCLayer(jjDEDX,iiDEDX) = 0.
               ADCWi1(jjDEDX,iiDEDX) = 0.
               ADCWi2(jjDEDX,iiDEDX) = 0.
               ADCLen(jjDEDX,iiDEDX) = 0.
               ADCLeff(jjDEDX,iiDEDX) = 0.
               ADCTim1(jjDEDX,iiDEDX) = 0.
               ADCTim2(jjDEDX,iiDEDX) = 0.
               ADCCharge(jjDEDX,iiDEDX) = 0.
            END DO
         END DO

         STATUS = BIGEST(IW, 'DEDX', BNKNUM)
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BLOCAT(IW, 'DEDX', BNKNUM, IND, INDDAT)
         END IF
         IF (STATUS.EQ.YESUCC) THEN
            istat = DEDX2STRU_Reset(Evt%DEDX2STRU)
            istat = DEDX2STRU_GET(Evt%DEDX2STRU)
   
            nDEDx = Evt%DEDX2STRU%numdedx
C            WRITE(*,*) "[DEBUG] nDEDx: ", nDEDx
   
            IF (nDEDx > 0 .AND. nDEDx <= 20) THEN
              DO iiDEDX=1, nDEDx
                 nADC(iiDEDX) = Evt%DEDX2STRU%numeroadc(iiDEDX)
                 IDEDx(iiDEDX) = Evt%DEDX2STRU%indicededx(iiDEDX)
                 DO jjDEDX=1, 100
                    ADCLayer(jjDEDX,iiDEDX) = Evt%DEDX2STRU%lay(jjDEDX,iiDEDX)
                    ADCWi1(jjDEDX,iiDEDX) = Evt%DEDX2STRU%wir1(jjDEDX,iiDEDX)
                    ADCWi2(jjDEDX,iiDEDX) = Evt%DEDX2STRU%wir2(jjDEDX,iiDEDX)
                    ADCLen(jjDEDX,iiDEDX) = Evt%DEDX2STRU%step(jjDEDX,iiDEDX)
                    ADCLeff(jjDEDX,iiDEDX) = Evt%DEDX2STRU%effs(jjDEDX,iiDEDX)
                    ADCTim1(jjDEDX,iiDEDX) = Evt%DEDX2STRU%tim1(jjDEDX,iiDEDX)
                    ADCTim2(jjDEDX,iiDEDX) = Evt%DEDX2STRU%tim2(jjDEDX,iiDEDX)
                    ADCCharge(jjDEDX,iiDEDX) = Evt%DEDX2STRU%carica(jjDEDX,iiDEDX)
                 END DO
              END DO
            ELSE
               IF (nDEDx == 0) THEN
                  DEDxErrorCounter(2) = DEDxErrorCounter(2) + 1
               ELSE
                  DEDxErrorCounter(3) = DEDxErrorCounter(3) + 1
               END IF
               nDEDx = 0
            END IF
         ELSE
            DEDxErrorCounter(1) = DEDxErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block dprs
C-----------------------------------------------------------------------
      IF (DPRSFLAG) THEN
         nDPRS = 0.
         DO iiDPRS=1, 200
           nView(iiDPRS) = 0.
           iDPRS(iiDPRS) = 0.
           DPRSVer(iiDPRS) = 0.
           nPos(iiDPRS) = 0.
           nNeg(iiDPRS) = 0.
           xPCA(iiDPRS) = 0.
           yPCA(iiDPRS) = 0.
           zPCA(iiDPRS) = 0.
           xLst(iiDPRS) = 0.
           yLst(iiDPRS) = 0.
           zLst(iiDPRS) = 0.
           CurP(iiDPRS) = 0.
           PhiP(iiDPRS) = 0.
           CotP(iiDPRS) = 0.
           Qual(iiDPRS) = 0.
           iPFl(iiDPRS) = 0.
           PrKine(iiDPRS) = 0.
           PrKHit(iiDPRS) = 0.
         END DO

         STATUS = BLOCAT(IW, 'DPRS', -1, IND, INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = GET_DPRS_STRUCT(Evt%DPRS)
   
            nDPRS =  Evt%DPRS%NDPRS
C            WRITE(*,*) "[DEBUG] nDPRS: ", nDPRS
   
            IF (nDPRS > 0 .AND. nDPRS <= 200) THEN
               DO iiDPRS=1, 3
                  nView(iiDPRS) =  Evt%DPRS%NVIEW(iiDPRS)
                  IF ( nView(iiDPRS) < 0 .OR. nView(iiDPRS) > 255 ) THEN
                     DPRSErrorCounter(4) = DPRSErrorCounter(4) + 1
                  END IF
               END DO
               DO iiDPRS=1, nDPRS
                  iDPRS(iiDPRS) =  Evt%DPRS%IDPRS(iiDPRS)
                  IF ( iDPRS(iiDPRS) < 0 .OR. iDPRS(iiDPRS) > 255 ) THEN
                     DPRSErrorCounter(4) = DPRSErrorCounter(4) + 1
                  END IF
                  DPRSVer(iiDPRS) =  Evt%DPRS%VERS(iiDPRS)
                  IF ( DPRSVer(iiDPRS) < 0 .OR. DPRSVer(iiDPRS) > 255 ) THEN
                     DPRSErrorCounter(4) = DPRSErrorCounter(4) + 1
                  END IF
                  nPos(iiDPRS) =  Evt%DPRS%NPOS(iiDPRS)
                  IF ( nPos(iiDPRS) < 0 .OR. nPos(iiDPRS) > 255 ) THEN
                     DPRSErrorCounter(4) = DPRSErrorCounter(4) + 1
                  END IF
                  nNeg(iiDPRS) =  Evt%DPRS%NNEG(iiDPRS)
                  IF ( nNeg(iiDPRS) < 0 .OR. nNeg(iiDPRS) > 255 ) THEN
                     DPRSErrorCounter(4) = DPRSErrorCounter(4) + 1
                  END IF
                  xPCA(iiDPRS) =  Evt%DPRS%XPCA(iiDPRS)
                  yPCA(iiDPRS) =  Evt%DPRS%YPCA(iiDPRS)
                  zPCA(iiDPRS) =  Evt%DPRS%ZPCA(iiDPRS)
                  xLst(iiDPRS) =  Evt%DPRS%XLST(iiDPRS)
                  yLst(iiDPRS) =  Evt%DPRS%YLST(iiDPRS)
                  zLst(iiDPRS) =  Evt%DPRS%ZLST(iiDPRS)
                  CurP(iiDPRS) =  Evt%DPRS%CURP(iiDPRS)
                  PhiP(iiDPRS) =  Evt%DPRS%PHIP(iiDPRS)
                  CotP(iiDPRS) =  Evt%DPRS%COTP(iiDPRS)
                  Qual(iiDPRS) =  Evt%DPRS%QUAL(iiDPRS)
                  iPFl(iiDPRS) =  Evt%DPRS%IPFL(iiDPRS)
                  IF ( iPFl(iiDPRS) < 0 .OR. iPFl(iiDPRS) > 15 ) THEN
                     DPRSErrorCounter(4) = DPRSErrorCounter(4) + 1
                  END IF
                  PrKine(iiDPRS) =  Evt%DPRS%KINE(iiDPRS)
                  IF ( PrKine(iiDPRS) < 0 .OR. PrKine(iiDPRS) > 255 ) THEN
                     DPRSErrorCounter(4) = DPRSErrorCounter(4) + 1
                  END IF
                  PrKHit(iiDPRS) =  Evt%DPRS%NHKINE(iiDPRS)
                  IF ( PrKHit(iiDPRS) < 0 .OR. PrKHit(iiDPRS) > 255 ) THEN
                     DPRSErrorCounter(4) = DPRSErrorCounter(4) + 1
                  END IF
               END DO
            ELSE
               IF (nDPRS == 0) THEN
                 DPRSErrorCounter(2) = DPRSErrorCounter(2) + 1
               ELSE
                 DPRSErrorCounter(3) = DPRSErrorCounter(3) + 1
               END IF
               nDPRS = 0
            END IF
         ELSE
            DPRSErrorCounter(1) = DPRSErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block mc
C-----------------------------------------------------------------------
      IF (GEANFIFLAG) THEN
        IF (MONTECARLOFLAG) THEN
           nTMC = 0.
           nVtxMC = 0.
           DO iMC=1, 50
             Kine(iMC) = 0.
             PidMC(iMC) = 0.
             VirMom(iMC) = 0.
             PxMC(iMC) = 0.
             PyMC(iMC) = 0.
             PzMC(iMC) = 0.
             xCv(iMC) = 0.
             yCv(iMC) = 0.
             zCv(iMC) = 0.
             TOfCv(iMC) = 0.
             TheMC(iMC) = 0.
             PhiMC(iMC) = 0.
             VtxMC(iMC) = 0.
             nDchMC(iMC) = 0.
             xFhMC(iMC) = 0.
             yFhMC(iMC) = 0.
             zFhMC(iMC) = 0.
             PxFhMC(iMC) = 0.
             PyFhMC(iMC) = 0.
             PzFhMC(iMC) = 0.
             xLhMC(iMC) = 0.
             yLhMC(iMC) = 0.
             zLhMC(iMC) = 0.
             PxLhMC(iMC) = 0.
             PyLhMC(iMC) = 0.
             PzLhMC(iMC) = 0.
           END DO
           DO iMC=1, 30
             KinMom(iMC) = 0.
             Mother(iMC) = 0.
             xVMC(iMC) = 0.
             yVMC(iMC) = 0.
             zVMC(iMC) = 0.
             TOfVMC(iMC) = 0.
             nTvTx(iMC) = 0.
           END DO
C
C          TODO: No blocat here?
C
           istat = GETMCSTRU(Evt%MC)
  
           nTMC = Evt%MC%ntrk
C           WRITE(*,*) "[DEBUG] nTMC: ", nTMC
  
           IF (nTMC > 0 .AND. nTMC <= 50) THEN
              DO iMC=1, nTMC
                 Kine(iMC) = Evt%MC%kin(iMC)
                 IF ( Kine(iMC) < 0 .OR. Kine(iMC) > 100 ) THEN
                    GeanfiErrorCounter(4) = GeanfiErrorCounter(4) + 1
                 END IF
                 PidMC(iMC) = Evt%MC%pid(iMC)
                 IF ( PidMC(iMC) < 0 .OR. PidMC(iMC) > 100 ) THEN
                    GeanfiErrorCounter(4) = GeanfiErrorCounter(4) + 1
                 END IF
                 VirMom(iMC) = Evt%MC%virmom(iMC)
                 IF ( VirMom(iMC) < 0 .OR. VirMom(iMC) > 100 ) THEN
                    GeanfiErrorCounter(4) = GeanfiErrorCounter(4) + 1
                 END IF
                 PxMC(iMC) = Evt%MC%px(iMC)
                 PyMC(iMC) = Evt%MC%py(iMC)
                 PzMC(iMC) = Evt%MC%pz(iMC)
                 xCv(iMC) = Evt%MC%xcv(iMC)
                 yCv(iMC) = Evt%MC%ycv(iMC)
                 zCv(iMC) = Evt%MC%zcv(iMC)
                 TOfCv(iMC) = Evt%MC%tofcv(iMC)
                 TheMC(iMC) = Evt%MC%theta(iMC)
                 PhiMC(iMC) = Evt%MC%phi(iMC)
                 VtxMC(iMC) = Evt%MC%Indv(iMC)
                 IF ( VtxMC(iMC) < 0 .OR. VtxMC(iMC) > 100 ) THEN
                    GeanfiErrorCounter(4) = GeanfiErrorCounter(4) + 1
                 END IF
                 nDchMC(iMC) = Evt%MC%ndchmc(iMC)
                 xFhMC(iMC) = Evt%MC%xfhmc(iMC)
                 yFhMC(iMC) = Evt%MC%yfhmc(iMC)
                 zFhMC(iMC) = Evt%MC%zfhmc(iMC)
                 PxFhMC(iMC) = Evt%MC%pxfhmc(iMC)
                 PyFhMC(iMC) = Evt%MC%pyfhmc(iMC)
                 PzFhMC(iMC) = Evt%MC%pzfhmc(iMC)
                 xLhMC(iMC) = Evt%MC%xlhmc(iMC)
                 yLhMC(iMC) = Evt%MC%ylhmc(iMC)
                 zLhMC(iMC) = Evt%MC%zlhmc(iMC)
                 PxLhMC(iMC) = Evt%MC%pxlhmc(iMC)
                 PyLhMC(iMC) = Evt%MC%pylhmc(iMC)
                 PzLhMC(iMC) = Evt%MC%pzlhmc(iMC)
              END DO
           ELSE
              IF (nTMC == 0) THEN
                 GeanfiErrorCounter(2) = GeanfiErrorCounter(2) + 1
              ELSE
                 GeanfiErrorCounter(3) = GeanfiErrorCounter(3) + 1
              END IF
              nTMC = 0
           END IF
  
           nVtxMC = Evt%MC%numvtx
C           WRITE(*,*) "[DEBUG] nVtxMC: ", nVtxMC
           
           IF (nVtxMC > 0 .AND. nVtxMC <= 30) THEN
              DO iMC=1, nVtxMC
                 KinMom(iMC) = Evt%MC%kinmom(iMC)
                 IF ( KinMom(iMC) < 0 .OR. KinMom(iMC) > 100 ) THEN
                    GeanfiErrorCounter(4) = GeanfiErrorCounter(4) + 1
                 END IF
                 Mother(iMC) = Evt%MC%mother(iMC)
                 IF ( Mother(iMC) < 0 .OR. Mother(iMC) > 100 ) THEN
                    GeanfiErrorCounter(4) = GeanfiErrorCounter(4) + 1
                 END IF
                 xVMC(iMC) = Evt%MC%xv(iMC)
                 yVMC(iMC) = Evt%MC%yv(iMC)
                 zVMC(iMC) = Evt%MC%zv(iMC)
                 TOfVMC(iMC) = Evt%MC%tof(iMC)
                 nTvTx(iMC) = Evt%MC%trkvtx(iMC)
              END DO
           ELSE
              IF (nVtxMC == 0) THEN
                 GeanfiErrorCounter(2) = GeanfiErrorCounter(2) + 1
              ELSE
                 GeanfiErrorCounter(3) = GeanfiErrorCounter(3) + 1
              END IF
              nVtxMC = 0
           END IF
        ELSE
           GeanfiErrorCounter(5) = GeanfiErrorCounter(5) + 1
        END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block tclo
C-----------------------------------------------------------------------
      IF (TCLOFLAG) THEN
         nTcl = 0.
         DO iTCLO=1, 40
           AssTr(iTCLO) = 0.
           AssCl(iTCLO) = 0.
           VerVer(iTCLO) = 0.
           xExt(iTCLO) = 0.
           yExt(iTCLO) = 0.
           zExt(iTCLO) = 0.
           AssLenG(iTCLO) = 0.
           AssChi(iTCLO) = 0.
           ExtPx(iTCLO) = 0.
           ExtPy(iTCLO) = 0.
           ExtPz(iTCLO) = 0.
         END DO

         STATUS = BIGEST(IW, 'TCLO', BNKNUM)
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BLOCAT(IW, 'TCLO', BNKNUM, IND, INDDAT)
         END IF
         
         IF (STATUS.EQ.YESUCC) THEN
            ISTAT =  GETTCLOSTRU(evt%tclo)
   
            nTcl = Evt%Tclo%nt
C           WRITE(*,*) "[DEBUG] nTMC: ", nTMC
   
            IF (nTcl > 0 .AND. nTcl <= 40) THEN
               DO iTCLO=1, nTcl
                  AssTr(iTCLO) = Evt%Tclo%trknum(iTCLO)
                  IF ( AssTr(iTCLO) < 0 .OR. AssTr(iTCLO) > 999 ) THEN
                     TcloErrorCounter(4) = TcloErrorCounter(4) + 1
                  END IF
                  AssCl(iTCLO) = Evt%Tclo%clunum(iTCLO)
                  IF ( AssCl(iTCLO) < 0 .OR. AssCl(iTCLO) > 100 ) THEN
                     TcloErrorCounter(4) = TcloErrorCounter(4) + 1
                  END IF
                    VerVer(iTCLO) = Evt%Tclo%verver(iTCLO)
                    xExt(iTCLO) = Evt%Tclo%xext(iTCLO)
                    yExt(iTCLO) = Evt%Tclo%yext(iTCLO)
                    zExt(iTCLO) = Evt%Tclo%zext(iTCLO)
                    AssLenG(iTCLO) = Evt%Tclo%leng(iTCLO)
                    AssChi(iTCLO) = Evt%Tclo%chi(iTCLO)
                    ExtPx(iTCLO) = Evt%Tclo%px(iTCLO)
                    ExtPy(iTCLO) = Evt%Tclo%py(iTCLO)
                    ExtPz(iTCLO) = Evt%Tclo%pz(iTCLO)
              END DO
            ELSE
               IF (nTcl == 0) THEN
                  TcloErrorCounter(2) = TcloErrorCounter(2) + 1
               ELSE
                  TcloErrorCounter(3) = TcloErrorCounter(3) + 1
               END IF
               nTcl = 0
            END IF
         ELSE
            TcloErrorCounter(1) = TcloErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block tclold
C-----------------------------------------------------------------------
      IF (TCLOLDFLAG) THEN
         nTclOld = 0.
         DO iTCLOLD=1, 40
           AssTrOld(iTCLOLD) = 0.
           AssClOld(iTCLOLD) = 0.
           VerVerOld(iTCLOLD) = 0.
           xExtOld(iTCLOLD) = 0.
           yExtOld(iTCLOLD) = 0.
           zExtOld(iTCLOLD) = 0.
           AssLenGOld(iTCLOLD) = 0.
           AssChiOld(iTCLOLD) = 0.
           ExtPxOld(iTCLOLD) = 0.
           ExtPyOld(iTCLOLD) = 0.
           ExtPzOld(iTCLOLD) = 0.
         END DO

         STATUS = BIGEST(IW, 'TCL1', BNKNUM)
         IF (STATUS.EQ.YESUCC) THEN
            STATUS = BLOCAT(IW, 'TCL1', BNKNUM, IND, INDDAT)
         END IF
         
         IF (STATUS.EQ.YESUCC) THEN
            istat =  GETOLDTCLOSTRU(evt%tclold)
   
            nTclOld = Evt%Tclold%nt
C           WRITE(*,*) "[DEBUG] nTclOld: ", nTclOld
   
            IF (nTclOld > 0 .AND. nTclOld <= 40) THEN
               DO iTCLOLD=1, nTclOld
                  AssTrOld(iTCLOLD) = Evt%Tclold%trknum(iTCLOLD)
                  IF ( AssTrOld(iTCLOLD) < 0 .OR. AssTrOld(iTCLOLD) > 999 ) THEN
                     TclOldErrorCounter(4) = TclOldErrorCounter(4) + 1
                  END IF
                  AssClOld(iTCLOLD) = Evt%Tclold%clunum(iTCLOLD)
                  IF ( AssClOld(iTCLOLD) < 0 .OR. AssClOld(iTCLOLD) > 100 ) THEN
                     TclOldErrorCounter(4) = TclOldErrorCounter(4) + 1
                  END IF
                    VerVerOld(iTCLOLD) = Evt%Tclold%verver(iTCLOLD)
                    xExtOld(iTCLOLD) = Evt%Tclold%xext(iTCLOLD)
                    yExtOld(iTCLOLD) = Evt%Tclold%yext(iTCLOLD)
                    zExtOld(iTCLOLD) = Evt%Tclold%zext(iTCLOLD)
                    AssLenGOld(iTCLOLD) = Evt%Tclold%leng(iTCLOLD)
                    AssChiOld(iTCLOLD) = Evt%Tclold%chi(iTCLOLD)
                    ExtPxOld(iTCLOLD) = Evt%Tclold%px(iTCLOLD)
                    ExtPyOld(iTCLOLD) = Evt%Tclold%py(iTCLOLD)
                    ExtPzOld(iTCLOLD) = Evt%Tclold%pz(iTCLOLD)
              END DO
            ELSE
               IF (nTclOld == 0) THEN
                  TclOldErrorCounter(2) = TclOldErrorCounter(2) + 1
               ELSE
                  TclOldErrorCounter(3) = TclOldErrorCounter(3) + 1
               END IF
               nTclOld = 0
            END IF
         ELSE
            TclOldErrorCounter(1) = TclOldErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block cfhi
C-----------------------------------------------------------------------
      IF (CFHIFLAG) THEN
         nFhi = 0.
         DO iCFHI=1, 300
           PidFhi(iCFHI) = 0.
           KinFhi(iCFHI) = 0.
           CelFhi(iCFHI) = 0.
           FlgFhi(iCFHI) = 0.
           xFhi(iCFHI) = 0.
           yFhi(iCFHI) = 0.
           zFhi(iCFHI) = 0.
           PxFhi(iCFHI) = 0.
           PyFhi(iCFHI) = 0.
           PzFhi(iCFHI) = 0.
           TofFhi(iCFHI) = 0.
           TLenFhi(iCFHI) = 0.
         END DO

         STATUS = BLOCAT(IW,'CFHI', 1,IND1,INDDAT )
         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = GETCFHISTRU(evt%cfhi)
   
            nFhi = Evt%CFHI%n
C           WRITE(*,*) "[DEBUG] nFhi: ", nFhi
   
            IF (nFhi > 0 .AND. nFhi <= 300) THEN
               DO iCFHI=1, nFhi
                  PidFhi(iCFHI) = Evt%CFHI%pid(iCFHI)
                  IF ( PidFhi(iCFHI) < 0 .OR. PidFhi(iCFHI) > 100 ) THEN
                     CFhiErrorCounter(4) = CFhiErrorCounter(4) + 1
                  END IF
                  KinFhi(iCFHI) = Evt%CFHI%kinum(iCFHI)
                  IF ( KinFhi(iCFHI) < 0 .OR. KinFhi(iCFHI) > 100 ) THEN
                     CFhiErrorCounter(4) = CFhiErrorCounter(4) + 1
                  END IF
                  CelFhi(iCFHI) = Evt%CFHI%celadr(iCFHI)
                  IF ( CelFhi(iCFHI) < 0 .OR. CelFhi(iCFHI) > 4880 ) THEN
                     CFhiErrorCounter(4) = CFhiErrorCounter(4) + 1
                  END IF
                  FlgFhi(iCFHI) = Evt%CFHI%convfl(iCFHI)
                  IF ( FlgFhi(iCFHI) < 0 .OR. FlgFhi(iCFHI) > 1 ) THEN
                     CFhiErrorCounter(4) = CFhiErrorCounter(4) + 1
                  END IF
                  xFhi(iCFHI) = Evt%CFHI%x(iCFHI)
                  yFhi(iCFHI) = Evt%CFHI%y(iCFHI)
                  zFhi(iCFHI) = Evt%CFHI%z(iCFHI)
                  PxFhi(iCFHI) = Evt%CFHI%px(iCFHI)
                  PyFhi(iCFHI) = Evt%CFHI%py(iCFHI)
                  PzFhi(iCFHI) = Evt%CFHI%pz(iCFHI)
                  TofFhi(iCFHI) = Evt%CFHI%tof(iCFHI)
                  TLenFhi(iCFHI) = Evt%CFHI%tlen(iCFHI)
              END DO
            ELSE
               IF (nFhi == 0) THEN
                  CFhiErrorCounter(2) = CFhiErrorCounter(2) + 1
               ELSE
                  CFhiErrorCounter(3) = CFhiErrorCounter(3) + 1
               END IF
               nFhi = 0
            END IF
         ELSE
            CFhiErrorCounter(1) = CFhiErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block qihi
C-----------------------------------------------------------------------
      IF (QIHIFLAG) THEN
         IF (.NOT.MONTECARLOFLAG) THEN
            nQIHI = 0.
            DO iQIHI=1, 1000
              PidQIHI(iQIHI) = 0.
              AddQIHI(iQIHI) = 0.
              KinQIHI(iQIHI) = 0.
              xQIHI(iQIHI) = 0.
              yQIHI(iQIHI) = 0.
              zQIHI(iQIHI) = 0.
              PxQIHI(iQIHI) = 0.
              PyQIHI(iQIHI) = 0.
              PzQIHI(iQIHI) = 0.
              TofQIHI(iQIHI) = 0.
              EneQIHI(iQIHI) = 0.
              TLenQIHI(iQIHI) = 0.
            END DO
   
C        
C        TODO: Notice that in prod2ntu, this function was commented. Why?
C
            STATUS = BIGEST(IW, 'QIHI', BNKNUM)
            IF( STATUS.EQ.YESUCC ) THEN
               STATUS = BLOCAT(IW, 'QIHI', BNKNUM, IND, INDDAT)
            END IF

            IF (STATUS.EQ.YESUCC) THEN
               ISTAT = GETQIHISTRU(evt%qhit)
      
               nQIHI = Evt%QHIT%n
C               WRITE(*,*) "[DEBUG] nQIHI: ", nQIHI
      
               IF (nQIHI > 0 .AND. nQIHI <= 1000) THEN
                  DO iQIHI=1, nQIHI
                       PidQIHI(iQIHI) = Evt%QHIT%pty(iQIHI)
                       AddQIHI(iQIHI) = Evt%QHIT%add(iQIHI)
                       KinQIHI(iQIHI) = Evt%QHIT%kine(iQIHI)
                       xQIHI(iQIHI) = Evt%QHIT%x(iQIHI)
                       yQIHI(iQIHI) = Evt%QHIT%Y(iQIHI)
                       zQIHI(iQIHI) = Evt%QHIT%z(iQIHI)
                       PxQIHI(iQIHI) = Evt%QHIT%px(iQIHI)
                       PyQIHI(iQIHI) = Evt%QHIT%px(iQIHI)
                       PzQIHI(iQIHI) = Evt%QHIT%pz(iQIHI)
                       TofQIHI(iQIHI) = Evt%QHIT%tof(iQIHI)
                       EneQIHI(iQIHI) = Evt%QHIT%ene(iQIHI)
                       TLenQIHI(iQIHI) = Evt%QHIT%trl(iQIHI)
                 END DO
               ELSE
                  IF (nQIHI == 0) THEN
                     QihiErrorCounter(2) = QihiErrorCounter(2) + 1
                  ELSE
                     QihiErrorCounter(3) = QihiErrorCounter(3) + 1
                  END IF
                  nQIHI = 0
               END IF
            ELSE
               QihiErrorCounter(4) = QihiErrorCounter(4) + 1
            END IF
         ELSE
            QihiErrorCounter(5) = QihiErrorCounter(5) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block trkq
C-----------------------------------------------------------------------
      IF (TRKQFLAG) THEN
         nTrkQ = 0.
         FlagQt = 0.
         DO iTRKQ=1, 100
           DO jTRKQ=1,2
             DetQt(jTRKQ, iTRKQ) = 0.
             WedQt(jTRKQ, iTRKQ) = 0.
             xQt(jTRKQ, iTRKQ) = 0.
             yQt(jTRKQ, iTRKQ) = 0.
             zQt(jTRKQ, iTRKQ) = 0.
           END DO
           ItrQt(iTRKQ) = 0.
         END DO
C
C        In the get function TRKQ2STRU there is no BLOCAT calling.
C        Then to check if the data are missing, we control that
C        the nTrkQ is equal to 0.
C
         istat = TRKQ2STRU( evt%trk, evt%trkq )

         nTrkQ = Evt%TRKQ%n
C         WRITE(*,*) "[DEBUG] nTrkQ: ", nTrkQ
         FlagQt = Evt%TRKQ%flagqt

         IF (nTrkQ > 0 .AND. nTrkQ <= 100) THEN
           DO iTRKQ=1, nTrkQ
             DO jTRKQ=1, 2 
               DetQt(jTRKQ,iTRKQ) = Evt%TRKQ%det(jTRKQ,iTRKQ)
               WedQt(jTRKQ,iTRKQ) = Evt%TRKQ%wed(jTRKQ,iTRKQ)
               xQt(jTRKQ,iTRKQ)   = Evt%TRKQ%xi(jTRKQ,iTRKQ)
               yQt(jTRKQ,iTRKQ)   = Evt%TRKQ%yi(jTRKQ,iTRKQ)
               zQt(jTRKQ,iTRKQ)   = Evt%TRKQ%zi(jTRKQ,iTRKQ)
             END DO
             ItrQt(iTRKQ) = Evt%TRKQ%itrk(iTRKQ)
           END DO
         ELSE
C         
C           Here we print IndexNotValid or MissingData error, according
C           to the value of nTrkQ
C
            IF (nTrkQ == 0) THEN
               TrqErrorCounter(2) = TrqErrorCounter(2) + 1
            ELSE
               TrqErrorCounter(3) = TrqErrorCounter(3) + 1
            END IF
            nTrkQ = 0
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block qele
C-----------------------------------------------------------------------
      IF (QELEFLAG) THEN
         IF (.NOT.MONTECARLOFLAG) THEN
            nQELE = 0.
            DO iQELE=1, 32
              QWed(iQELE) = 0.
              QDet(iQELE) = 0.
              QEne(iQELE) = 0.
              QTim(iQELE) = 0.
            END DO
  
            STATUS = BIGEST(IW, 'QCAE', BNKNUM)
            IF (STATUS.EQ.YESUCC) THEN
               STATUS = BLOCAT(IW, 'QCAE', BNKNUM, IND, INDDAT)
            END IF

            IF (STATUS.EQ.YESUCC) THEN
               ISTAT = GETQCAESTRU(Evt%Qele)
      
               nQELE = Evt%QELE%n
C               WRITE(*,*) "[DEBUG] nQELE: ", nQELE
      
               IF (nQELE > 0 .AND. nQELE <= 32) THEN
                  DO iQELE=1, nQELE
                       QWed(iQELE) = Evt%QELE%wed(iQELE)
                       QDet(iQELE) = Evt%QELE%det(iQELE)
                       QEne(iQELE) = Evt%QELE%e(iQELE)
                       QTim(iQELE) = Evt%QELE%t(iQELE)
                 END DO
               ELSE
                  IF (nQELE == 0) THEN
                     QeleErrorCounter(2) = QeleErrorCounter(2) + 1
                  ELSE
                     QeleErrorCounter(3) = QeleErrorCounter(3) + 1
                  END IF
                  nQELE = 0
               END IF
            ELSE
               QeleErrorCounter(1) = QeleErrorCounter(1) + 1
            END IF
         ELSE
            QeleErrorCounter(5) = QeleErrorCounter(5) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block qcal
C-----------------------------------------------------------------------
      IF (QCALFLAG) THEN
         IF (.NOT.MONTECARLOFLAG) THEN
            nQCal = 0.
            DO iQCAL=1, 32
              xQCal(iQCAL) = 0.
              yQCal(iQCAL) = 0.
              zQCal(iQCAL) = 0.
              EQCal(iQCAL) = 0.
              TQCal(iQCAL) = 0.
            END DO
C
C           It reads QCAL Work Bank.
C
            STATUS = BIGEST(IW, 'QWRK', BNKNUM)
            IF (STATUS.EQ.YESUCC) THEN
               STATUS = BLOCAT(IW, 'QWRK', BNKNUM, IND, INDDAT)
            END IF

            IF (STATUS.EQ.YESUCC) THEN
               ISTAT = GETQCALSTRU(evt%qcal)
      
               nQCal = Evt%Qcal%n
               IF ( nQCal < 0 .OR. nQCal > 32 ) THEN
                  QCalErrorCounter(4) = QCalErrorCounter(4) + 1
               END IF
      
               IF (nQCal > 0 .AND. nQCal <= 32) THEN
                  DO iQCAL=1, nQCal
                       xQCal(iQCAL) = Evt%Qcal%x(iQCAL)
                       yQCal(iQCAL) = Evt%Qcal%y(iQCAL)
                       zQCal(iQCAL) = Evt%Qcal%z(iQCAL)
                       EQCal(iQCAL) = Evt%Qcal%ene(iQCAL)
                       TQCal(iQCAL) = Evt%Qcal%t(iQCAL)
                 END DO
               ELSE
                  IF (nQCal == 0) THEN
                     QCalErrorCounter(2) = QCalErrorCounter(2) + 1
                  ELSE
                     QCalErrorCounter(3) = QCalErrorCounter(3) + 1
                  END IF
                  nQCal = 0
               END IF
            ELSE
               QCalErrorCounter(1) = QCalErrorCounter(1) + 1
            END IF
         ELSE
            QCalErrorCounter(5) = QCalErrorCounter(5) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block knvo
C-----------------------------------------------------------------------
      IF (KNVOFLAG) THEN
         nKNVO = 0.
         DO iiKNVO=1, 40
           iKNVO(iiKNVO) = 0.
           PxKNVO(iiKNVO) = 0.
           PyKNVO(iiKNVO) = 0.
           PzKNVO(iiKNVO) = 0.
           PidKNVO(iiKNVO) = 0.
           BankKNVO(iiKNVO) = 0.
           nVnvKNVO(iiKNVO) = 0.
         END DO

         STATUS = BLOCAT(IW, 'KNVO', -1, IND, INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = GETNVO(evt%knvo,evt%vnvo,evt%vnvb,evt%invo)
   
            nKNVO = Evt%KNVO%n
C            WRITE(*,*) "[DEBUG] nKNVO: ", nKNVO
   
            IF (nKNVO > 0 .AND. nKNVO <= 40) THEN
               DO iiKNVO=1, nKNVO
                    iKNVO(iiKNVO) = Evt%KNVO%iknvo(iiKNVO)
                    PxKNVO(iiKNVO) = Evt%KNVO%px(iiKNVO)
                    PyKNVO(iiKNVO) = Evt%KNVO%py(iiKNVO)
                    PzKNVO(iiKNVO) = Evt%KNVO%pz(iiKNVO)
                    PidKNVO(iiKNVO) = Evt%KNVO%pid(iiKNVO)
                    BankKNVO(iiKNVO) = Evt%KNVO%bank(iiKNVO)
                    nVnvKNVO(iiKNVO) = Evt%KNVO%vlinked(iiKNVO)
              END DO
            ELSE
               IF (nKNVO == 0) THEN
                  KNVOErrorCounter(2) = KNVOErrorCounter(2) + 1
               ELSE
                  KNVOErrorCounter(3) = KNVOErrorCounter(3) + 1
               END IF
               nKNVO = 0
            END IF
         ELSE
            KNVOErrorCounter(1) = KNVOErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block vnvo
C-----------------------------------------------------------------------
      IF (VNVOFLAG) THEN
         nVNVO = 0.
         DO iiVNVO=1, 40
           iVNVO(iiVNVO) = 0.
           VxVNVO(iiVNVO) = 0.
           VyVNVO(iiVNVO) = 0.
           VzVNVO(iiVNVO) = 0.
           KorIVNVO(iiVNVO) = 0.
           DvfsVNVO(iiVNVO) = 0.
           nBnkVNVO(iiVNVO) = 0.
           fBnkVNVO(iiVNVO) = 0.
         END DO

         STATUS = BLOCAT(IW, 'VNVO', -1, IND, INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = GETNVO(evt%knvo,evt%vnvo,evt%vnvb,evt%invo)
   
            nVNVO = Evt%VNVO%n
C            WRITE(*,*) "[DEBUG] nVNVO: ", nVNVO
   
            IF (nVNVO > 0 .AND. nVNVO <= 40) THEN
               DO iiVNVO=1, nVNVO
                    iVNVO(iiVNVO) = Evt%VNVO%ivnvo(iiVNVO)
                    VxVNVO(iiVNVO) = Evt%VNVO%vx(iiVNVO)
                    VyVNVO(iiVNVO) = Evt%VNVO%vy(iiVNVO)
                    VzVNVO(iiVNVO) = Evt%VNVO%vz(iiVNVO)
                    KorIVNVO(iiVNVO) = Evt%VNVO%kori(iiVNVO)
                    DvfsVNVO(iiVNVO) = Evt%VNVO%idvfs(iiVNVO)
                    nBnkVNVO(iiVNVO) = Evt%VNVO%nknv(iiVNVO)
                    fBnkVNVO(iiVNVO) = Evt%VNVO%fknv(iiVNVO)
              END DO
            ELSE
               IF (nVNVO == 0) THEN
                  VNVOErrorCounter(2) = VNVOErrorCounter(2) + 1
               ELSE
                  VNVOErrorCounter(3) = VNVOErrorCounter(3) + 1
               END IF
               nVNVO = 0
            END IF
         ELSE
            VNVOErrorCounter(1) = VNVOErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block vnvb
C-----------------------------------------------------------------------
      IF (VNVBFLAG) THEN
         nBnksVNVO = 0.
         DO iVNVB=1, 40
           iBank(iVNVB) = 0.
         END DO

         STATUS = BLOCAT(IW, 'VNVO', -1, IND, INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            istat = GETNVO(evt%knvo,evt%vnvo,evt%vnvb,evt%invo)
   
            nBnksVNVO = Evt%VNVB%n
C            WRITE(*,*) "[DEBUG] nBnksVNVO: ", nBnksVNVO
            IF ( nBnksVNVO < 0 .OR. nBnksVNVO > 40 ) THEN
               VNVBErrorCounter(4) = VNVBErrorCounter(4) + 1
            END IF
   
            IF (nBnksVNVO > 0 .AND. nBnksVNVO <= 40) THEN
               DO iVNVB=1, nBnksVNVO
                    iBank(iVNVB) = Evt%VNVB%ibank(iVNVB)
              END DO
            ELSE
               IF (nBnksVNVO == 0) THEN
                  VNVBErrorCounter(2) = VNVBErrorCounter(2) + 1
               ELSE
                  VNVBErrorCounter(3) = VNVBErrorCounter(3) + 1
               END IF
               nBnksVNVO = 0
            END IF
         ELSE
            VNVBErrorCounter(1) = VNVBErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block invo
C-----------------------------------------------------------------------
      IF (INVOFLAG) THEN
         nINVO = 0.
         DO iINVO=1, 40
           iClps(iINVO) = 0.
           xINVO(iINVO) = 0.
           yINVO(iINVO) = 0.
           zINVO(iINVO) = 0.
           tINVO(iINVO) = 0.
           Lk(iINVO) = 0.
           SigmaLk(iINVO) = 0.
         END DO

         STATUS = BLOCAT(IW, 'INVO', -1, IND, INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = GETNVO(evt%knvo,evt%vnvo,evt%vnvb,evt%invo)
   
            nINVO = Evt%INVO%n
C            WRITE(*,*) "[DEBUG] nINVO: ", nINVO
   
            IF (nINVO > 0 .AND. nINVO <= 40) THEN
               DO iINVO=1, nINVO
                    iClps(iINVO) = Evt%INVO%iclps(iINVO)
                    xINVO(iINVO) = Evt%INVO%xi(iINVO)
                    yINVO(iINVO) = Evt%INVO%yi(iINVO)
                    zINVO(iINVO) = Evt%INVO%zi(iINVO)
                    tINVO(iINVO) = Evt%INVO%ti(iINVO)
                    Lk(iINVO) = Evt%INVO%lk(iINVO)
                    SigmaLk(iINVO) = Evt%INVO%sigmalk(iINVO)
              END DO
            ELSE
               IF (nINVO == 0) THEN
                  INVOErrorCounter(2) = INVOErrorCounter(2) + 1
               ELSE
                  INVOErrorCounter(3) = INVOErrorCounter(3) + 1
               END IF
               nINVO = 0
            END IF
         ELSE
            INVOErrorCounter(1) = INVOErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block eclo
C-----------------------------------------------------------------------
      IF (ECLOFLAG) THEN
         nCli = 0.
         DO iECLO=1, 100
           ECLOWord(iECLO) = 0.
           IdPart(iECLO) = 0.
           DtClpo(iECLO) = 0.
           DvVnpo(iECLO) = 0.
           Stre(iECLO) = 0.
           Algo(iECLO) = 0.
         END DO
        
         nCli2 = 0.
         DO iECLO2=1, 100
           ECLOWord2(iECLO2) = 0.
           IdPart2(iECLO2) = 0.
           DtClpo2(iECLO2) = 0.
           DvVnpo2(iECLO2) = 0.
           Stre2(iECLO2) = 0.
           Algo2(iECLO2) = 0.
         END DO

         STATUS = BLOCAT(IW, 'ECLO', 1, IND, INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = GETECLO(evt%eclo)
   
            nCli = Evt%eclo%n
C            WRITE(*,*) "[DEBUG] nCli: ", nCli
   
            IF (nCli > 0 .AND. nCli <= 100) THEN
               DO iECLO=1, nCli
                    ECLOWord(iECLO) = Evt%eclo%totword(iECLO)
                    IdPart(iECLO) = Evt%eclo%idpart(iECLO)
                    DtClpo(iECLO) = Evt%eclo%dtclpo(iECLO)
                    DvVnpo(iECLO) = Evt%eclo%dvvnpo(iECLO)
                    Stre(iECLO) = Evt%eclo%stre(iECLO)
                    Algo(iECLO) = Evt%eclo%algo(iECLO)
              END DO
            ELSE
               IF (nCli == 0) THEN
                  EcloErrorCounter(2) = EcloErrorCounter(2) + 1
               ELSE
                  EcloErrorCounter(3) = EcloErrorCounter(3) + 1
               END IF
               nCli = 0
            END IF

            STATUS = BLOCAT(IW, 'ECLO', 2, IND, INDDAT)
            IF (STATUS.EQ.YESUCC) THEN
               nCli2 = Evt%eclo%n2
C               WRITE(*,*) "[DEBUG] nCli2: ", nCli2

               IF (nCli2 > 0 .AND. nCli2 <= 100) THEN
                  DO iECLO2=1, nCli2
                       ECLOWord2(iECLO2) = Evt%eclo%totword2(iECLO2)
                       IdPart2(iECLO2) = Evt%eclo%idpart2(iECLO2)
                       DtClpo2(iECLO2) = Evt%eclo%dtclpo2(iECLO2)
                       DvVnpo2(iECLO2) = Evt%eclo%dvvnpo2(iECLO2)
                       Stre2(iECLO2) = Evt%eclo%stre2(iECLO2)
                       Algo2(iECLO2) = Evt%eclo%algo2(iECLO2)
                 END DO
               ELSE
                  IF (nCli2 == 0) THEN
                     EcloErrorCounter(2) = EcloErrorCounter(2) + 1
                  ELSE
                     EcloErrorCounter(3) = EcloErrorCounter(3) + 1
                  END IF
                  nCli2 = 0
               END IF
C If only the 2nd banks is missing, then it returns the relative
C variables as empty. Then, I didn't increment the error counter.
C            ELSE 
C               EcloErrorCounter(1) = EcloErrorCounter(1) + 1
            END IF
         ELSE 
            EcloErrorCounter(1) = EcloErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block csps
C-----------------------------------------------------------------------
      IF (CSPSFLAG) THEN
         nCS = 0.
         DO iCSPS=1, 2000
           CSClu(iCSPS) = 0.
           CSCel(iCSPS) = 0.
           CSFla(iCSPS) = 0.
           CSAdd(iCSPS) = 0.
           CSNhi(iCSPS) = 0.
           CSTa(iCSPS) = 0.
           CSTb(iCSPS) = 0.
           CSEa(iCSPS) = 0.
           CSEb(iCSPS) = 0.
           CST(iCSPS) = 0.
           CSE(iCSPS) = 0.
           CSx(iCSPS) = 0.
           CSy(iCSPS) = 0.
           CSz(iCSPS) = 0.
         END DO

         STATUS = BLOCAT(IW, 'CSPS', 1, IND, INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = GETCSPSSTRU(0,EVT%CSPS,EVT%CSPSMC)
   
            nCS = Evt%CSPS%Ncel
C            WRITE(*,*) "[DEBUG] nCS: ", nCS
   
            IF (nCS > 0 .AND. nCS <= 2000) THEN
               DO iCSPS=1, nCS
                    CSClu(iCSPS) = Evt%Csps%Iclu(iCSPS)
                    CSCel(iCSPS) = Evt%Csps%Icel(iCSPS)
                    CSFla(iCSPS) = Evt%Csps%Flag(iCSPS)
                    CSAdd(iCSPS) = Evt%Csps%Add(iCSPS)
                    CSNhi(iCSPS) = Evt%Csps%Nhit(iCSPS)
                    CSTa(iCSPS) = Evt%Csps%Ta(iCSPS)
                    CSTb(iCSPS) = Evt%Csps%Tb(iCSPS)
                    CSEa(iCSPS) = Evt%Csps%Ea(iCSPS)
                    CSEb(iCSPS) = Evt%Csps%Eb(iCSPS)
                    CST(iCSPS) = Evt%Csps%T(iCSPS)
                    CSE(iCSPS) = Evt%Csps%E(iCSPS)
                    CSx(iCSPS) = Evt%Csps%X(iCSPS)
                    CSy(iCSPS) = Evt%Csps%Y(iCSPS)
                    CSz(iCSPS) = Evt%Csps%Z(iCSPS)
              END DO
            ELSE
               IF (nCS == 0) THEN
                  CSPSErrorCounter(2) = CSPSErrorCounter(2) + 1
               ELSE
                  CSPSErrorCounter(3) = CSPSErrorCounter(3) + 1
               END IF
               nCS = 0
            END IF
C         
C           Fill MC data only if they exist, otherwise don't create empty structures         
C
            IF (MONTECARLOFLAG) THEN
               nCSMC = 0.
               DO iCSPSMC=1, 2000
                 CSMCKine(iCSPSMC) = 0.
                 CSMCPoi(iCSPSMC) = 0.
                 CSMCNHit(iCSPSMC) = 0.
                 CSMCx(iCSPSMC) = 0.
                 CSMCy(iCSPSMC) = 0.
                 CSMCz(iCSPSMC) = 0.
                 CSMCt(iCSPSMC) = 0.
                 CSMCe(iCSPSMC) = 0.
               END DO
C      
C              In the get function are also accessed CHIT, CEKA, CEKE
C              only for MC data. CEKA, CEKE are ignored by prod2ntu.
C              For this reason, we check only CSPS and CHIT. CHIT only if
C              MC is required.
C
               STATUS = BLOCAT(IW, 'CHIT', 1, IND, INDDAT)
               IF (STATUS.EQ.YESUCC) THEN
                  nCSMC = Evt%CSPSMC%Ncel
         
                  IF (nCSMC > 0 .AND. nCSMC <= 2000) THEN
                     DO iCSPSMC=1, nCSMC
                          CSMCKine(iCSPSMC) = Evt%CSPSMC%Knum(iCSPSMC)
                          CSMCPoi(iCSPSMC) = Evt%CSPSMC%Ihit(iCSPSMC)
                          CSMCNHit(iCSPSMC) = Evt%CSPSMC%Nhit(iCSPSMC)
                          CSMCx(iCSPSMC) = Evt%CSPSMC%X(iCSPSMC)
                          CSMCy(iCSPSMC) = Evt%CSPSMC%Y(iCSPSMC)
                          CSMCz(iCSPSMC) = Evt%CSPSMC%Z(iCSPSMC)
                          CSMCt(iCSPSMC) = Evt%CSPSMC%T(iCSPSMC)
                          CSMCe(iCSPSMC) = Evt%CSPSMC%E(iCSPSMC)
                    END DO
                  ELSE
                     IF (nCSMC == 0) THEN
                        CSPSErrorCounter(2) = CSPSErrorCounter(2) + 1
                     ELSE
                        CSPSErrorCounter(3) = CSPSErrorCounter(3) + 1
                     END IF
                     nCSMC = 0
                  END IF
               ELSE 
                  CSPSErrorCounter(1) = CSPSErrorCounter(1) + 1
               END IF
            END IF
         ELSE 
            CSPSErrorCounter(1) = CSPSErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block cluo
C-----------------------------------------------------------------------
      IF (CLUOFLAG) THEN
         nCluO = 0.
         DO iCLUO=1, 100
           CluCel(iCLUO) = 0.
           CluFl(iCLUO) = 0.
           CluE(iCLUO) = 0.
           CluX(iCLUO) = 0.
           CluY(iCLUO) = 0.
           CluZ(iCLUO) = 0.
           CluT(iCLUO) = 0.
         END DO

         STATUS = BLOCAT(IW, 'CLUO', 1, IND, INDDAT)
         IF (STATUS.EQ.YESUCC) THEN
            ISTAT = GETCLUOSTRU(Evt%CLUO)
   
            nCluO = Evt%CLUO%N
C            WRITE(*,*) "[DEBUG] nCluO: ", nCluO
   
            IF (nCluO > 0 .AND. nCluO <= 100) THEN
               DO iCLUO=1, nCluO
                    CluCel(iCLUO) = Evt%CLUO%Ncel(iCLUO)
                    CluFl(iCLUO) = Evt%CLUO%Flag(iCLUO)
                    CluE(iCLUO) = Evt%CLUO%E(iCLUO)
                    CluX(iCLUO) = Evt%CLUO%X(iCLUO)
                    CluY(iCLUO) = Evt%CLUO%Y(iCLUO)
                    CluZ(iCLUO) = Evt%CLUO%Z(iCLUO)
                    CluT(iCLUO) = Evt%CLUO%T(iCLUO)
              END DO
            ELSE
               IF (nCluO == 0) THEN
                  CluoErrorCounter(2) = CluoErrorCounter(2) + 1
               ELSE
                  CluoErrorCounter(3) = CluoErrorCounter(3) + 1
               END IF
               nCluO = 0
            END IF
C         
C           Fill MC data only if they exist, otherwise don't create empty structures         
C
            IF (MONTECARLOFLAG) THEN
               nMCPar = 0.
               DO iCLUOMC=1, 100
                 CluMCCel(iCLUOMC) = 0.
                 CluMCiCl(iCLUOMC) = 0.
                 CluMCKin(iCLUOMC) = 0.
                 CluMCe(iCLUOMC) = 0.
                 CluMCx(iCLUOMC) = 0.
                 CluMCy(iCLUOMC) = 0.
                 CluMCz(iCLUOMC) = 0.
                 CluMCt(iCLUOMC) = 0.
               END DO
         
               STATUS = BLOCAT(IW, 'CLMO', 1, IND, INDDAT)
               IF (STATUS.EQ.YESUCC) THEN
                  ISTAT = GETCLUOMCSTRU(Evt%CLUO)
         
                  nMCPar = Evt%CLUOMC%Npar
         
                  IF (nMCPar > 0 .AND. nMCPar <= 100) THEN
                     DO iCLUOMC=1, nMCPar
                          CluMCCel(iCLUOMC) = Evt%CLUOMC%Ncel(iCLUOMC)
                          CluMCiCl(iCLUOMC) = Evt%CLUOMC%Iclu(iCLUOMC)
                          CluMCKin(iCLUOMC) = Evt%CLUOMC%Kine(iCLUOMC)
                          CluMCe(iCLUOMC) = Evt%CLUOMC%E(iCLUOMC)
                          CluMCx(iCLUOMC) = Evt%CLUOMC%X(iCLUOMC)
                          CluMCy(iCLUOMC) = Evt%CLUOMC%Y(iCLUOMC)
                          CluMCz(iCLUOMC) = Evt%CLUOMC%Z(iCLUOMC)
                          CluMCt(iCLUOMC) = Evt%CLUOMC%T(iCLUOMC)
                    END DO
                  ELSE
                     IF (nMCPar == 0) THEN
                        CluoErrorCounter(2) = CluoErrorCounter(2) + 1
                     ELSE
                        CluoErrorCounter(3) = CluoErrorCounter(3) + 1
                     END IF
                     nMCPar = 0
                  END IF
               ELSE 
                  CluoErrorCounter(1) = CluoErrorCounter(1) + 1
               END IF
            END IF
         ELSE 
            CluoErrorCounter(1) = CluoErrorCounter(1) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block qtele
C-----------------------------------------------------------------------
      IF (QTELEFLAG) THEN
        IF (.NOT.MONTECARLOFLAG) THEN
           nQCalT = 0.
           DO iQTELE=1, 1920
             QLte_Hit(iQTELE) = 0.
             QLte_Det(iQTELE) = 0.
             QLte_Mod(iQTELE) = 0.
             QLte_Pla(iQTELE) = 0.
             QLte_Til(iQTELE) = 0.
             QLte_Tim1(iQTELE) = 0.
             QLte_Tim2(iQTELE) = 0.
             QLte_Tim3(iQTELE) = 0.
             QLte_Tim4(iQTELE) = 0.
             QLte_Tim5(iQTELE) = 0.
           END DO

C          Returns Largest Bank Number  
           STATUS = BIGEST(IW, 'QCTE', BNKNUM)
           IF( STATUS.EQ.YESUCC ) THEN
              STATUS = BLOCAT(IW, 'QCTE', BNKNUM, IND, INDDAT)
           END IF
           IF( STATUS.EQ.YESUCC ) THEN
              ISTAT = GETQCALTSTRU(Evt%QCALT)
     
              nQCalT = Evt%QCALT%NEle
C              WRITE(*,*) "[DEBUG] nQCalT: ", nQCalT
     
              IF (nQCalT > 0 .AND. nQCalT <= 1920) THEN
                 DO iQTELE=1, nQCalT
                    QLte_Hit(iQTELE) = Evt%QCALT%Nhit(iQTELE)
                    IF ( QLte_Hit(iQTELE) < 0 .OR. QLte_Hit(iQTELE) > 5 ) THEN
                       QTeleErrorCounter(4) = QTeleErrorCounter(4) + 1
                    END IF
                    QLte_Det(iQTELE) = Evt%QCALT%Qdet(iQTELE)
                    IF ( QLte_Det(iQTELE) < 0 .OR. QLte_Det(iQTELE) > 2 ) THEN
                       QTeleErrorCounter(4) = QTeleErrorCounter(4) + 1
                    END IF
                    QLte_Mod(iQTELE) = Evt%QCALT%Qmod(iQTELE)
                    IF ( QLte_Mod(iQTELE) < 0 .OR. QLte_Mod(iQTELE) > 11 ) THEN
                       QTeleErrorCounter(4) = QTeleErrorCounter(4) + 1
                    END IF
                    QLte_Pla(iQTELE) = Evt%QCALT%Qpla(iQTELE)
                    IF ( QLte_Pla(iQTELE) < 0 .OR. QLte_Pla(iQTELE) > 4 ) THEN
                       QTeleErrorCounter(4) = QTeleErrorCounter(4) + 1
                    END IF
                    QLte_Til(iQTELE) = Evt%QCALT%Qtil(iQTELE)
                    IF ( QLte_Til(iQTELE) < 0 .OR. QLte_Til(iQTELE) > 15 ) THEN
                       QTeleErrorCounter(4) = QTeleErrorCounter(4) + 1
                    END IF
                    QLte_Tim1(iQTELE) = Evt%QCALT%Time(iQTELE, 1)
                    QLte_Tim2(iQTELE) = Evt%QCALT%Time(iQTELE, 2)
                    QLte_Tim3(iQTELE) = Evt%QCALT%Time(iQTELE, 3)
                    QLte_Tim4(iQTELE) = Evt%QCALT%Time(iQTELE, 4)
                    QLte_Tim5(iQTELE) = Evt%QCALT%Time(iQTELE, 5)
                END DO
              ELSE
                 IF (nQCalT == 0) THEN
                    QTeleErrorCounter(2) = QTeleErrorCounter(2) + 1
                 ELSE
                    QTeleErrorCounter(3) = QTeleErrorCounter(3) + 1
                 END IF
                 nQCalT = 0
              END IF
           ELSE 
              QTeleErrorCounter(1) = QTeleErrorCounter(1) + 1
           END IF
        ELSE
           QTeleErrorCounter(5) = QTeleErrorCounter(5) + 1
        END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block qcth
C-----------------------------------------------------------------------
      IF (QCTHFLAG) THEN
         IF (.NOT.MONTECARLOFLAG) THEN
            nQCTHEle = 0.
            DO iQCTH=1, 1920
              nQCTHHit(iQCTH) = 0.
              QCTHx(iQCTH) = 0.
              QCTHy(iQCTH) = 0.
              QCTHz(iQCTH) = 0.
              Tim1(iQCTH) = 0.
              Tim2(iQCTH) = 0.
              Tim3(iQCTH) = 0.
              Tim4(iQCTH) = 0.
              Tim5(iQCTH) = 0.
            END DO
  
            STATUS = BLOCAT(IW, 'QCTH', 1, IND, INDDAT)
            IF (STATUS.EQ.YESUCC) THEN
               ISTAT = GETQCTHSTRU(Evt%QCALTHIT)
      
               nQCTHEle = Evt%QCALTHIT%Nele
C               WRITE(*,*) "[DEBUG] nQCTHEle: ", nQCTHEle
      
               IF (nQCTHEle > 0 .AND. nQCTHEle <= 1920) THEN
                  DO iQCTH=1, nQCTHEle
                     nQCTHHit(iQCTH) = Evt%QCALTHIT%Nhit(iQCTH)
                     IF ( nQCTHHit(iQCTH) < 1 .OR. nQCTHHit(iQCTH) > 5 ) THEN
                        QCTHErrorCounter(4) = QCTHErrorCounter(4) + 1
                     END IF
                     QCTHx(iQCTH) = Evt%QCALTHIT%X(iQCTH)
                     QCTHy(iQCTH) = Evt%QCALTHIT%Y(iQCTH)
                     QCTHz(iQCTH) = Evt%QCALTHIT%Z(iQCTH)
                     Tim1(iQCTH) = Evt%QCALTHIT%Time(iQCTH, 1)
                     Tim2(iQCTH) = Evt%QCALTHIT%Time(iQCTH, 2)
                     Tim3(iQCTH) = Evt%QCALTHIT%Time(iQCTH, 3)
                     Tim4(iQCTH) = Evt%QCALTHIT%Time(iQCTH, 4)
                     Tim5(iQCTH) = Evt%QCALTHIT%Time(iQCTH, 5)
                 END DO
               ELSE
                  IF (nQCTHEle == 0) THEN
                     QCTHErrorCounter(2) = QCTHErrorCounter(2) + 1
                  ELSE
                     QCTHErrorCounter(3) = QCTHErrorCounter(3) + 1
                  END IF
                  nQCTHEle = 0
               END IF
            ELSE
               QCTHErrorCounter(1) = QCTHErrorCounter(1) + 1
            END IF
         ELSE
C           TODO: Should I remove this control?
            QCTHErrorCounter(5) = QCTHErrorCounter(5) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block ccle
C-----------------------------------------------------------------------
      IF (CCLEFLAG) THEN
         IF (.NOT.MONTECARLOFLAG) THEN
            nCCle = 0.
            DO iCCLE=1, 96
              CCle_Cry(iCCLE) = 0.
              CCle_Det(iCCLE) = 0.
              CCle_Col(iCCLE) = 0.
              CCle_Pla(iCCLE) = 0.
              CCle_Time(iCCLE) = 0.
            END DO
            
            STATUS = BLOCAT(IW, 'CCLE', 1, IND, INDDAT)
            IF (STATUS.EQ.YESUCC) THEN
               ISTAT = GETCCALTSTRU(EVT%CCLE)
      
               nCCle = Evt%CCLE%NEle
C               WRITE(*,*) "[DEBUG] nCCle: ", nCCle
      
               IF (nCCle > 0 .AND. nCCle <= 96) THEN
                  DO iCCLE=1, nCCle
                     CCle_Cry(iCCLE) = Evt%CCLE%Cry(iCCLE)
                     IF ( CCle_Cry(iCCLE) < 0 .OR. CCle_Cry(iCCLE) > 96 ) THEN
                        CCleErrorCounter(4) = CCleErrorCounter(4) + 1
                     END IF
                       CCle_Det(iCCLE) = Evt%CCLE%Det(iCCLE)
                     CCle_Col(iCCLE) = Evt%CCLE%Col(iCCLE)
                     IF ( CCle_Col(iCCLE) < 0 .OR. CCle_Col(iCCLE) > 24 ) THEN
                        CCleErrorCounter(4) = CCleErrorCounter(4) + 1
                     END IF
                     CCle_Pla(iCCLE) = Evt%CCLE%Pla(iCCLE)
                     IF ( CCle_Pla(iCCLE) < 0 .OR. CCle_Pla(iCCLE) > 2 ) THEN
                        CCleErrorCounter(4) = CCleErrorCounter(4) + 1
                     END IF
                       CCle_Time(iCCLE) = Evt%CCLE%T(iCCLE)
                 END DO
               ELSE
                  IF (nCCle == 0) THEN
                     CCleErrorCounter(2) = CCleErrorCounter(2) + 1
                  ELSE
                     CCleErrorCounter(3) = CCleErrorCounter(3) + 1
                  END IF
                  nCCle = 0
               END IF
            ELSE
               CCleErrorCounter(1) = CCleErrorCounter(1) + 1
            END IF
         ELSE
C           TODO: Should I remove this control?
            CCleErrorCounter(5) = CCleErrorCounter(5) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block lete
C-----------------------------------------------------------------------
      IF (LETEFLAG) THEN
         IF (.NOT.MONTECARLOFLAG) THEN
            LeteCalib = 0.
            nLete = 0.
            DO iLETE=1, 40
              Lete_Cry(iLETE) = 0.
              Lete_Det(iLETE) = 0.
              Lete_Col(iLETE) = 0.
              Lete_Pla(iLETE) = 0.
              Lete_E(iLETE) = 0.
              Lete_Time(iLETE) = 0.
            END DO
            
            STATUS = BLOCAT(IW, "LETE", 1, IND, INDDAT)
            IF (STATUS.EQ.YESUCC) THEN
               ISTAT = GETLETESTRU(EVT%LETE)
      
               LeteCalib = Evt%LETE%Calib
               nLete = Evt%LETE%NEle
C               WRITE(*,*) "[DEBUG] nLete: ", nLete
      
               IF (nLete > 0 .AND. nLete <= 40) THEN
                  DO iLETE=1, nLete
                     Lete_Cry(iLETE) = Evt%LETE%Cry(iLETE)
                     IF ( Lete_Cry(iLETE) < 0 .OR. Lete_Cry(iLETE) > 40 ) THEN
                        LeteErrorCounter(4) = LeteErrorCounter(4) + 1
                     END IF
                       Lete_Det(iLETE) = Evt%LETE%Det(iLETE)
                     Lete_Col(iLETE) = Evt%LETE%Col(iLETE)
                     IF ( Lete_Col(iLETE) < 0 .OR. Lete_Col(iLETE) > 4 ) THEN
                        LeteErrorCounter(4) = LeteErrorCounter(4) + 1
                     END IF
                     Lete_Pla(iLETE) = Evt%LETE%Pla(iLETE)
                     IF ( Lete_Pla(iLETE) < 0 .OR. Lete_Pla(iLETE) > 5 ) THEN
                        LeteErrorCounter(4) = LeteErrorCounter(4) + 1
                     END IF
                       Lete_E(iLETE) = Evt%LETE%E(iLETE)
                       Lete_Time(iLETE) = Evt%LETE%T(iLETE)
                  END DO
               ELSE
C                  WRITE(*,*) ERROR_BLOCK//'LETE - nLete '//ERROR_INDEX, nLete
                  IF (nLete == 0) THEN
                  ELSE
                  END IF
                  nLete = 0
               END IF
            ELSE
               LeteErrorCounter(1) = LeteErrorCounter(1) + 1
            END IF
         ELSE
C           TODO: Should I remove this control?
            LeteErrorCounter(5) = LeteErrorCounter(5) + 1
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block itce
C-----------------------------------------------------------------------
      IF (ITCEFLAG) THEN
         IF (.NOT.MONTECARLOFLAG) THEN
            nITCE = 0.
            DO iITCE=1, 4032
              Foil(iITCE) = 0.
              ITLayer(iITCE) = 0.
              Strip(iITCE) = 0.
              View(iITCE) = 0.
              IndItKine(iITCE) = 0.
            END DO
   
            STATUS = BLOCAT(IW, 'ITCE', 1, IND, INDDAT)
            IF (STATUS.EQ.YESUCC) THEN
               ISTAT = ITCE_UPK(EVT%ITCE)
      
               nITCE = Evt%itce%nitce
               IF ( nITCE < 0 .OR. nITCE > 4032 ) THEN
C                  WRITE(*,*) ERROR_BLOCK//'ITCE - nITCE '//ERROR_DOMAIN, nITCE
               END IF
      
               IF (nITCE > 0 .AND. nITCE <= 4032) THEN
                  DO iITCE=1, nITCE
                       Foil(iITCE) = Evt%itce%foil(iITCE)
                       ITLayer(iITCE) = Evt%itce%layer(iITCE)
                       Strip(iITCE) = Evt%itce%strip(iITCE)
                       View(iITCE) = Evt%itce%view(iITCE)
                       IndItKine(iITCE) = Evt%itce%inditkine(iITCE)
                 END DO
               ELSE
C                  WRITE(*,*) ERROR_BLOCK//'ITCE - nITCE '//ERROR_INDEX, nITCE
                  nITCE = 0
               END IF
            ELSE
C               WRITE(*,*) ERROR_MISS_DATA//'ITCE'
            END IF
         ELSE
C           TODO: Should I remove this control?
C            WRITE(*,*) ERROR_MISS_DATA//'ITCE'
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block hete
C-----------------------------------------------------------------------
      IF (HETEFLAG) THEN
         IF (.NOT.MONTECARLOFLAG) THEN
            nHetDcs = 0.
            DO iHETE=1, 1920
              HDet(iHETE) = 0.
              HCol(iHETE) = 0.
              nTurnHet(iHETE) = 0.
              TimeHet(iHETE) = 0.
            END DO
   
            STATUS = BLOCAT(IW, 'HETE', 1, IND, INDDAT)
            IF (STATUS.EQ.YESUCC) THEN
               ISTAT = GETHETESTRU(evt%hete)
   
               nHetDcs = Evt%hete%nhetdcs
               IF ( nHetDcs < 0 .OR. nHetDcs > 1920 ) THEN
C                  WRITE(*,*) ERROR_BLOCK//'HETE - nHetDcs '//ERROR_DOMAIN, nHetDcs
               END IF
      
               IF (nHetDcs > 0 .AND. nHetDcs <= 1920) THEN
                  DO iHETE=1, nHetDcs
                     HDet(iHETE) = Evt%hete%hdet(iHETE)
                     IF ( HDet(iHETE) < 1 .OR. HDet(iHETE) > 2 ) THEN
C                        WRITE(*,*) ERROR_BLOCK//'HETE - HDet '//ERROR_DOMAIN, HDet(iHETE)
                     END IF
                     HCol(iHETE) = Evt%hete%hcol(iHETE)
                     IF ( HCol(iHETE) < 1 .OR. HCol(iHETE) > 32 ) THEN
C                        WRITE(*,*) ERROR_BLOCK//'HETE - HCol '//ERROR_DOMAIN, HCol(iHETE)
                     END IF
                     nTurnHet(iHETE) = Evt%hete%nturnhet(iHETE)
                     IF ( nTurnHet(iHETE) < 1 .OR. nTurnHet(iHETE) > 4 ) THEN
C                        WRITE(*,*) ERROR_BLOCK//'HETE - nTurnHet '//ERROR_DOMAIN, nTurnHet(iHETE)
                     END IF
                       TimeHet(iHETE) = Evt%hete%timehet(iHETE)
                 END DO
               ELSE
C                  WRITE(*,*) ERROR_BLOCK//'HETE - nHetDcs '//ERROR_INDEX, nHetDcs
                  nHetDcs = 0
               END IF
            ELSE
C               WRITE(*,*) ERROR_MISS_DATA//'HETE'
            END IF
         ELSE
C           TODO: Should I remove this control?         
C            WRITE(*,*) ERROR_MISS_DATA//'HETE'
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Root
C-----------------------------------------------------------------------
      call fillNtu() 	
C==============================================================================
CC End of code
C==============================================================================
      RETURN
      END
C
C==============================================================================
      SUBROUTINE SAMRE
C==============================================================================
C
$$IMPLICIT
C
C==============================================================================
C
      RETURN 
      END
C

C==============================================================================
      SUBROUTINE SAMHB
C==============================================================================
C
$$IMPLICIT
C
$$INCLUDE 'C$INC:ERLEVL.INC'
$$INCLUDE 'CALIBINC:ANERROR.INC'
$$include 'k$inc:jobsta.inc'
$$include 'k$inc:runtyp.inc'
$$include 'sample.inc'
$$include 'sample_talk.cin'
C
C Local declarations
C
      INTEGER    MinHisId, MaxHisId
C      INTEGER    NtuId ! Comment to avoid conflict with raw2dtce.cin
      LOGICAL    HisFlg
C
C==============================================================================
C
C    Initialization tree for ROOT
      write(*,*) '==========================='
      write(*,*) '[Info] START BOOKING'
      write(*,*) '==========================='

      call initTree()

      RETURN 
      END
C
C==============================================================================
      SUBROUTINE SAMTK
C==============================================================================
C
C  Description:
C  ------------
C
C==============================================================================
C
$$IMPLICIT
C
$$INCLUDE 'A_C_LIBRARY:ANERROR.INC'
$$INCLUDE 'S_I$LIBRARY:NOARGINC.INC'
$$include 'sample_talk.inc'
C
C External functions
C
      INTEGER   UIDFFI, UIUSGP, UIACME
      INTEGER   UIGTYE, UIGTRE, UIGTIN
C
C Local declarations
C
      INTEGER   STATUS, MENUF, MENUL, IGROUP
      CHARACTER*3 flag
      CHARACTER Verb*40, Prompt*100
C
C==============================================================================
C
      Status=UIDFFI( 
     $     '/gpfs/user/e/eperez/prod2root/ref/sample.uid'
     $     ,IGROUP,MENUF,N$A,N$A,MENUL,N$A )
      Status = UIUSGP(IGROUP,N$A)
 10   Status = UIACME(MENUF,Verb,N$A) ! Display menu
C     

      if(verb.eq.'SHOW')then
        call showHeader()
	    goto 10
      else if(verb.eq.'INFO')then
      	write(Prompt,123)'INFO'
    	Status=UIGTYE(Prompt,INFOFLAG)
    	goto 10
      else if(verb.eq.'DATA')then
      	write(Prompt,123)'DATA'
    	Status=UIGTYE(Prompt,DATAFLAG)
    	goto 10
      else if(verb.eq.'BPOS')then
      	write(Prompt,123)'BPOS'
    	Status=UIGTYE(Prompt,BPOSFLAG)
    	goto 10
      else if(verb.eq.'GDHIT')then
      	write(Prompt,123)'GDHIT'
    	Status=UIGTYE(Prompt,GDHITFLAG)
    	goto 10
      else if(verb.eq.'ECLS')then
      	write(Prompt,123)'ECLS'
	    Status=UIGTYE(Prompt,ECLSFLAG)
    	goto 10
      else if(verb.eq.'TRIG')then
      	write(Prompt,123)'TRIG'
	    Status=UIGTYE(Prompt,TRIGFLAG)
    	goto 10
      else if(verb.eq.'C2TRG')then
      	write(Prompt,123)'C2TRG'
	    Status=UIGTYE(Prompt,C2TRGFLAG)
    	goto 10
      else if(verb.eq.'TELLINA')then
      	write(Prompt,123)'TELLINA'
	    Status=UIGTYE(Prompt,TELLINAFLAG)
    	goto 10
      else if(verb.eq.'PIZZETTA')then
      	write(Prompt,123)'PIZZETTA'
	    Status=UIGTYE(Prompt,PIZZETTAFLAG)
    	goto 10
      else if(verb.eq.'TORTA')then
      	write(Prompt,123)'TORTA'
	    Status=UIGTYE(Prompt,TORTAFLAG)
    	goto 10
      else if(verb.eq.'TELE')then
      	write(Prompt,123)'TELE'
	    Status=UIGTYE(Prompt,TELEFLAG)
	    goto 10
      else if(verb.eq.'PIZZA')then
      	write(Prompt,123)'PIZZA'
	    Status=UIGTYE(Prompt,PIZZAFLAG)
    	goto 10
      else if(verb.eq.'TIME')then
      	write(Prompt,123)'TIME'
	    Status=UIGTYE(Prompt,TIMEFLAG)
    	goto 10
      else if(verb.eq.'CLUS')then
      	write(Prompt,123)'CLUS'
	    Status=UIGTYE(Prompt,CLUSFLAG)
    	goto 10
      else if(verb.eq.'PRECLUS')then
      	write(Prompt,123)'PRECLUS'
	    Status=UIGTYE(Prompt,PRECLUSFLAG)
    	goto 10
      else if(verb.eq.'CWRK')then
      	write(Prompt,123)'CWRK'
	    Status=UIGTYE(Prompt,CWRKFLAG)
    	goto 10
      else if(verb.eq.'CELE')then
      	write(Prompt,123)'CELE'
	    Status=UIGTYE(Prompt,CELEFLAG)
    	goto 10
      else if(verb.eq.'DTCE')then
      	write(Prompt,123)'DTCE'
	    Status=UIGTYE(Prompt,DTCEFLAG)
    	goto 10
      else if(verb.eq.'DTC0')then
      	write(Prompt,123)'DTC0'
	    Status=UIGTYE(Prompt,DTCE0FLAG)
    	goto 10
      else if(verb.eq.'DCHITS')then
      	write(Prompt,123)'DCHITS'
	    Status=UIGTYE(Prompt,DCHITSFLAG)
    	goto 10
      else if(verb.eq.'DHRE')then
      	write(Prompt,123)'DHRE'
	    Status=UIGTYE(Prompt,DHREFLAG)
    	goto 10
      else if(verb.eq.'DHSP')then
      	write(Prompt,123)'DHSP'
	    Status=UIGTYE(Prompt,DHSPFLAG)
    	goto 10
      else if(verb.eq.'TRV')then
      	write(Prompt,123)'TRKV'
	    Status=UIGTYE(Prompt,TRKVFLAG)
    	goto 10
      else if(verb.eq.'VTX')then
      	write(Prompt,123)'VTX'
	    Status=UIGTYE(Prompt,VTXFLAG)
    	goto 10
      else if(verb.eq.'TRS')then
      	write(Prompt,123)'TRKS'
	    Status=UIGTYE(Prompt,TRKSFLAG)
    	goto 10
      else if(verb.eq.'TRKVO')then
      	write(Prompt,123)'TRKVO'
	    Status=UIGTYE(Prompt,TRKVOLDFLAG)
    	goto 10
      else if(verb.eq.'VTO')then
      	write(Prompt,123)'VTO'
	    Status=UIGTYE(Prompt,VTXOLDFLAG)
    	goto 10
      else if(verb.eq.'TRKSO')then
      	write(Prompt,123)'TRKSO'
	    Status=UIGTYE(Prompt,TRKSOLDFLAG)
    	goto 10
      else if(verb.eq.'DHIT')then
      	write(Prompt,123)'DHIT'
	    Status=UIGTYE(Prompt,DHITFLAG)
    	goto 10
      else if(verb.eq.'DEDX')then
      	write(Prompt,123)'DEDX'
	    Status=UIGTYE(Prompt,DEDXFLAG)
    	goto 10
      else if(verb.eq.'DPRS')then
      	write(Prompt,123)'DPRS'
	    Status=UIGTYE(Prompt,DPRSFLAG)
    	goto 10
      else if(verb.eq.'GEANFI')then
      	write(Prompt,123)'GEANFI'
	    Status=UIGTYE(Prompt,GEANFIFLAG)
    	goto 10
      else if(verb.eq.'TCLO')then
      	write(Prompt,123)'TCLO'
	    Status=UIGTYE(Prompt,TCLOFLAG)
    	goto 10
      else if(verb.eq.'TCOLD')then
      	write(Prompt,123)'TCOLD'
	    Status=UIGTYE(Prompt,TCLOLDFLAG)
    	goto 10
      else if(verb.eq.'CFHI')then
      	write(Prompt,123)'CFHI'
	    Status=UIGTYE(Prompt,CFHIFLAG)
    	goto 10
      else if(verb.eq.'QIHI')then
      	write(Prompt,123)'QIHI'
	    Status=UIGTYE(Prompt,QIHIFLAG)
    	goto 10
      else if(verb.eq.'TRKQ')then
      	write(Prompt,123)'TRKQ'
	    Status=UIGTYE(Prompt,TRKQFLAG)
    	goto 10
      else if(verb.eq.'QELE')then
      	write(Prompt,123)'QELE'
	    Status=UIGTYE(Prompt,QELEFLAG)
    	goto 10
      else if(verb.eq.'QCAL')then
      	write(Prompt,123)'QCAL'
	    Status=UIGTYE(Prompt,QCALFLAG)
    	goto 10
      else if(verb.eq.'KNVO')then
      	write(Prompt,123)'KNVO'
	    Status=UIGTYE(Prompt,KNVOFLAG)
    	goto 10
      else if(verb.eq.'VNVO')then
      	write(Prompt,123)'VNVO'
	    Status=UIGTYE(Prompt,VNVOFLAG)
    	goto 10
      else if(verb.eq.'VNVB')then
      	write(Prompt,123)'VNVB'
	    Status=UIGTYE(Prompt,VNVBFLAG)
    	goto 10
      else if(verb.eq.'INVO')then
      	write(Prompt,123)'INVO'
	    Status=UIGTYE(Prompt,INVOFLAG)
    	goto 10
      else if(verb.eq.'ECLO')then
      	write(Prompt,123)'ECLO'
	    Status=UIGTYE(Prompt,ECLOFLAG)
    	goto 10
      else if(verb.eq.'CSPS')then
      	write(Prompt,123)'CSPS'
	    Status=UIGTYE(Prompt,CSPSFLAG)
    	goto 10
      else if(verb.eq.'CLUO')then
      	write(Prompt,123)'CLUO'
	    Status=UIGTYE(Prompt,CLUOFLAG)
    	goto 10
      else if(verb.eq.'QTELE')then
      	write(Prompt,123)'QTELE'
	    Status=UIGTYE(Prompt,QTELEFLAG)
    	goto 10
      else if(verb.eq.'QCTH')then
      	write(Prompt,123)'QCTH'
	    Status=UIGTYE(Prompt,QCTHFLAG)
    	goto 10
      else if(verb.eq.'CCLE')then
      	write(Prompt,123)'CCLE'
	    Status=UIGTYE(Prompt,CCLEFLAG)
    	goto 10
      else if(verb.eq.'LETE')then
      	write(Prompt,123)'LETE'
	    Status=UIGTYE(Prompt,LETEFLAG)
    	goto 10
      else if(verb.eq.'ITCE')then
      	write(Prompt,123)'ITCE'
	    Status=UIGTYE(Prompt,ITCEFLAG)
    	goto 10
      else if(verb.eq.'HETE')then
      	write(Prompt,123)'HETE'
	    Status=UIGTYE(Prompt,HETEFLAG)
    	goto 10
      else if(verb.eq.'MCFLG')then
      	write(Prompt,123)'MCFLG'
	    Status=UIGTYE(Prompt,MCFLG)
    	goto 10
      end if
C
123   FORMAT(1x,'Select ',a4,' Ntuple-block?')
C

C      write(*,*)"[TALKTO_END] GEANFIFLAG: ", GEANFIFLAG
C      write(*,*)"[TALKTO_END] BPOSFLAG: ", BPOSFLAG
C      write(*,*)" "
      RETURN
      END
C     

C=============================================================================
      SUBROUTINE SAMFI
C===========================================================================
	  write(*,*)'Run End routine'
      call closeTree() 

      RETURN
      END
C
C===========================================================================
